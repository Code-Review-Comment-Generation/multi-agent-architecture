import logging
import os
from textwrap import dedent
from typing import Iterator

from agno.agent import Agent, RunResponse
from agno.utils.log import logger
from agno.workflow import Workflow
from dotenv import load_dotenv

from agents import (
    create_bug_detector_agent,
    create_reviewer_agent,
    create_style_checker_agent,
)
from teams import create_specialised_team
from utils import create_knowledge_tools, fetch_patch_content

load_dotenv()

# Setup file logging for this module
file_logger = logging.getLogger(__name__)
file_logger.setLevel(logging.DEBUG)


class TeamWorkflow(Workflow):
    description: str = (
        "Review code using specialized agents to detect bugs and style issues, then format the feedback as GitHub review comments."
    )

    def __init__(self, file_path: str, debug_mode=False, recreate_knowledge=False):
        super().__init__(debug_mode=debug_mode)

        file_logger.info(
            f"Initializing TeamWorkflow with file_path: {file_path}, debug_mode: {debug_mode}"
        )

        # Set file path
        self.file_path = file_path

        # Create agents
        file_logger.info("Creating bug detector agent...")
        self.bug_detector_agent = create_bug_detector_agent()

        file_logger.info("Creating style checker agent...")
        self.style_checker_agent = create_style_checker_agent()

        # Create knowledge tools
        # self.knowledge_tools = create_knowledge_tools(recreate=recreate_knowledge)

        # Create team with knowledge tools
        file_logger.info("Creating specialized team...")
        self.specialised_team = create_specialised_team(
            self.bug_detector_agent,
            self.style_checker_agent,
            # self.knowledge_tools
        )

        file_logger.info("Creating reviewer agent...")
        self.reviewer_agent = create_reviewer_agent()

        file_logger.info("TeamWorkflow initialization complete")

    def fetch_patch_content(self):
        """
        Fetches the content of a file to be used as the codebase for review.
        This method wraps the utility function to allow for customization specific to this workflow.
        """
        file_logger.info(f"Fetching patch content from: {self.file_path}")
        content = fetch_patch_content(self.file_path)
        file_logger.debug(
            f"Patch content length: {len(content) if content else 0} characters"
        )
        return content

    def run(self) -> Iterator[RunResponse]:
        file_logger.info("Starting TeamWorkflow run")
        logger.info(f"Getting CodeBase to review.")

        patch_content = self.fetch_patch_content()
        # print(codebase_content)

        team_input_message = dedent(
            f"""
            **Code Change Review Task for Specialised Team**

            **Coordinator, your team has a new code *change* review assignment.**

            **Patch Content (Diff):**
            ```diff
            {patch_content}
            ```

            **Your High-Level Objective:**
            1.  Briefly analyze the provided **code changes (diff)**. Understand what files are being modified and the nature of the changes.
            2.  Determine the **single most critical type of review** needed for these *specific changes*:
                *   **Bug Detection Focus:** If you suspect the *changes* introduce potential functional errors, logical flaws, runtime issues, or security vulnerabilities within the modified code sections.
                *   **Style & Best Practices Focus:** If the primary concern within the *changes* appears to be code style, formatting, readability, maintainability, or adherence to coding best practices in the new/modified code.
            3.  Based on your determination, delegate this review task to the **one specialist agent** in your team (either the Bug Detector or the Style Checker) best equipped to handle this primary focus for the given *changes*.
            4.  Ensure the specialist receives all necessary information (the **full patch content** and the **patch file path**) to perform their review effectively. They need to understand they are reviewing a diff.
            5.  The final output expected from your team is the detailed analysis report generated by the chosen specialist on the provided *patch content*.

            Please proceed with your assessment and delegation for these code changes.
        """
        )

        file_logger.info("Running specialized team analysis...")
        analysis_report: RunResponse = self.specialised_team.run(team_input_message)

        if analysis_report is None or not analysis_report.content:
            file_logger.warning("Analysis report is empty or None")
            yield RunResponse(
                run_id=self.run_id, content="Sorry, could not get the analysis report."
            )
            return

        file_logger.info("Analysis report generated successfully")
        file_logger.debug(
            f"Analysis report content length: {len(analysis_report.content)}"
        )

        logger.info("Reading the detailed analysis report and writing the comment.")
        print(analysis_report.content)

        file_logger.info("Running reviewer agent...")
        yield from self.reviewer_agent.run(analysis_report.content, stream=True)

        file_logger.info("TeamWorkflow run completed")
