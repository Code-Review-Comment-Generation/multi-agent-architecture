{
    "directed": true,
    "multigraph": false,
    "graph": {},
    "nodes": [
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                ".",
                ".",
                0,
                0
            ],
            "id": "."
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "docs",
                "docs",
                0,
                0
            ],
            "id": "docs"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "tests",
                "tests",
                0,
                0
            ],
            "id": "tests"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                ".ropeproject",
                ".ropeproject",
                0,
                0
            ],
            "id": ".ropeproject"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                ".github",
                ".github",
                0,
                0
            ],
            "id": ".github"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "llm",
                "llm",
                0,
                0
            ],
            "id": "llm"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "docs/_templates",
                "docs/_templates",
                0,
                0
            ],
            "id": "docs/_templates"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "docs/plugins",
                "docs/plugins",
                0,
                0
            ],
            "id": "docs/plugins"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "docs/embeddings",
                "docs/embeddings",
                0,
                0
            ],
            "id": "docs/embeddings"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "docs/conf.py",
                "docs/conf.py",
                1,
                174
            ],
            "id": "docs/conf.py"
        },
        {
            "type": "global_variable",
            "signature": "extensions",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::extensions",
                33,
                33
            ],
            "id": "docs/conf.py::extensions"
        },
        {
            "type": "global_variable",
            "signature": "myst_enable_extensions",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::myst_enable_extensions",
                34,
                34
            ],
            "id": "docs/conf.py::myst_enable_extensions"
        },
        {
            "type": "global_variable",
            "signature": "templates_path",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::templates_path",
                37,
                37
            ],
            "id": "docs/conf.py::templates_path"
        },
        {
            "type": "global_variable",
            "signature": "source_suffix",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::source_suffix",
                43,
                43
            ],
            "id": "docs/conf.py::source_suffix"
        },
        {
            "type": "global_variable",
            "signature": "master_doc",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::master_doc",
                46,
                46
            ],
            "id": "docs/conf.py::master_doc"
        },
        {
            "type": "global_variable",
            "signature": "project",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::project",
                49,
                49
            ],
            "id": "docs/conf.py::project"
        },
        {
            "type": "global_variable",
            "signature": "copyright",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::copyright",
                50,
                50
            ],
            "id": "docs/conf.py::copyright"
        },
        {
            "type": "global_variable",
            "signature": "author",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::author",
                51,
                51
            ],
            "id": "docs/conf.py::author"
        },
        {
            "type": "global_variable",
            "signature": "pipe",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::pipe",
                58,
                58
            ],
            "id": "docs/conf.py::pipe"
        },
        {
            "type": "global_variable",
            "signature": "git_version",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::git_version",
                59,
                59
            ],
            "id": "docs/conf.py::git_version"
        },
        {
            "type": "global_variable",
            "signature": "version",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::version",
                65,
                65
            ],
            "id": "docs/conf.py::version"
        },
        {
            "type": "global_variable",
            "signature": "release",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::release",
                66,
                66
            ],
            "id": "docs/conf.py::release"
        },
        {
            "type": "global_variable",
            "signature": "language",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::language",
                73,
                73
            ],
            "id": "docs/conf.py::language"
        },
        {
            "type": "global_variable",
            "signature": "exclude_patterns",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::exclude_patterns",
                78,
                78
            ],
            "id": "docs/conf.py::exclude_patterns"
        },
        {
            "type": "global_variable",
            "signature": "pygments_style",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::pygments_style",
                81,
                81
            ],
            "id": "docs/conf.py::pygments_style"
        },
        {
            "type": "global_variable",
            "signature": "todo_include_todos",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::todo_include_todos",
                84,
                84
            ],
            "id": "docs/conf.py::todo_include_todos"
        },
        {
            "type": "global_variable",
            "signature": "html_theme",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::html_theme",
                92,
                92
            ],
            "id": "docs/conf.py::html_theme"
        },
        {
            "type": "global_variable",
            "signature": "html_theme_options",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::html_theme_options",
                98,
                98
            ],
            "id": "docs/conf.py::html_theme_options"
        },
        {
            "type": "global_variable",
            "signature": "html_title",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::html_title",
                99,
                99
            ],
            "id": "docs/conf.py::html_title"
        },
        {
            "type": "global_variable",
            "signature": "html_static_path",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::html_static_path",
                104,
                104
            ],
            "id": "docs/conf.py::html_static_path"
        },
        {
            "type": "global_variable",
            "signature": "htmlhelp_basename",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::htmlhelp_basename",
                110,
                110
            ],
            "id": "docs/conf.py::htmlhelp_basename"
        },
        {
            "type": "global_variable",
            "signature": "latex_elements",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::latex_elements",
                115,
                128
            ],
            "id": "docs/conf.py::latex_elements"
        },
        {
            "type": "global_variable",
            "signature": "latex_documents",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::latex_documents",
                133,
                141
            ],
            "id": "docs/conf.py::latex_documents"
        },
        {
            "type": "global_variable",
            "signature": "man_pages",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::man_pages",
                148,
                156
            ],
            "id": "docs/conf.py::man_pages"
        },
        {
            "type": "global_variable",
            "signature": "texinfo_documents",
            "docstring": null,
            "layer": 4,
            "loc": [
                "docs/conf.py",
                "docs/conf.py::texinfo_documents",
                164,
                174
            ],
            "id": "docs/conf.py::texinfo_documents"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "docs/plugins/llm-markov",
                "docs/plugins/llm-markov",
                0,
                0
            ],
            "id": "docs/plugins/llm-markov"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py",
                1,
                68
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py"
        },
        {
            "type": "function",
            "signature": "register_models(register)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::register_models",
                9,
                10
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::register_models"
        },
        {
            "type": "function",
            "signature": "build_markov_table(text)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::build_markov_table",
                13,
                21
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::build_markov_table"
        },
        {
            "type": "function",
            "signature": "generate(transitions, length, start_word)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::generate",
                24,
                30
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::generate"
        },
        {
            "type": "class",
            "signature": "Markov",
            "docstring": null,
            "layer": 2,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::Markov",
                33,
                68
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::Markov"
        },
        {
            "type": "class",
            "signature": "Options",
            "docstring": null,
            "layer": 2,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::Options",
                37,
                59
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::Options"
        },
        {
            "type": "method",
            "signature": "validate_length(cls, length)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::Options::validate_length",
                46,
                51
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::Options::validate_length"
        },
        {
            "type": "method",
            "signature": "validate_delay(cls, delay)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::Options::validate_delay",
                54,
                59
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::Options::validate_delay"
        },
        {
            "type": "method",
            "signature": "execute(self, prompt, stream, response, conversation)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "docs/plugins/llm-markov/llm_markov.py",
                "docs/plugins/llm-markov/llm_markov.py::Markov::execute",
                61,
                68
            ],
            "id": "docs/plugins/llm-markov/llm_markov.py::Markov::execute"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                ".github/workflows",
                ".github/workflows",
                0,
                0
            ],
            "id": ".github/workflows"
        },
        {
            "type": "directory",
            "signature": null,
            "docstring": null,
            "layer": 0,
            "loc": [
                "llm/default_plugins",
                "llm/default_plugins",
                0,
                0
            ],
            "id": "llm/default_plugins"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/__main__.py",
                "llm/__main__.py",
                1,
                4
            ],
            "id": "llm/__main__.py"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/vua_utils.py",
                "llm/vua_utils.py",
                1,
                18
            ],
            "id": "llm/vua_utils.py"
        },
        {
            "type": "function",
            "signature": "vua_remove_dict_none_values(d)",
            "docstring": "Recursively remove keys with value of None or value of a dict that is all values of None",
            "layer": 3,
            "loc": [
                "llm/vua_utils.py",
                "llm/vua_utils.py::vua_remove_dict_none_values",
                1,
                18
            ],
            "id": "llm/vua_utils.py::vua_remove_dict_none_values"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py",
                1,
                422
            ],
            "id": "llm/__init__.py"
        },
        {
            "type": "global_variable",
            "signature": "__all__",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::__all__",
                36,
                61
            ],
            "id": "llm/__init__.py::__all__"
        },
        {
            "type": "global_variable",
            "signature": "DEFAULT_MODEL",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::DEFAULT_MODEL",
                62,
                62
            ],
            "id": "llm/__init__.py::DEFAULT_MODEL"
        },
        {
            "type": "function",
            "signature": "get_plugins(all)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_plugins",
                65,
                82
            ],
            "id": "llm/__init__.py::get_plugins"
        },
        {
            "type": "function",
            "signature": "get_models_with_aliases()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_models_with_aliases",
                85,
                105
            ],
            "id": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "type": "function",
            "signature": "register(model, aliases)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::register",
                192,
                193
            ],
            "id": "llm/__init__.py::register"
        },
        {
            "type": "function",
            "signature": "_get_loaders(hook_method)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::_get_loaders",
                108,
                121
            ],
            "id": "llm/__init__.py::_get_loaders"
        },
        {
            "type": "function",
            "signature": "get_template_loaders()",
            "docstring": "Get template loaders registered by plugins.",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_template_loaders",
                124,
                126
            ],
            "id": "llm/__init__.py::get_template_loaders"
        },
        {
            "type": "function",
            "signature": "get_fragment_loaders()",
            "docstring": "Get fragment loaders registered by plugins.",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_fragment_loaders",
                129,
                134
            ],
            "id": "llm/__init__.py::get_fragment_loaders"
        },
        {
            "type": "function",
            "signature": "get_tools()",
            "docstring": "Get tools registered by plugins.",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_tools",
                137,
                163
            ],
            "id": "llm/__init__.py::get_tools"
        },
        {
            "type": "function",
            "signature": "get_embedding_models_with_aliases()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_embedding_models_with_aliases",
                166,
                186
            ],
            "id": "llm/__init__.py::get_embedding_models_with_aliases"
        },
        {
            "type": "function",
            "signature": "get_embedding_models()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_embedding_models",
                189,
                197
            ],
            "id": "llm/__init__.py::get_embedding_models"
        },
        {
            "type": "function",
            "signature": "get_embedding_model(name)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_embedding_model",
                200,
                205
            ],
            "id": "llm/__init__.py::get_embedding_model"
        },
        {
            "type": "function",
            "signature": "get_embedding_model_aliases()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_embedding_model_aliases",
                208,
                214
            ],
            "id": "llm/__init__.py::get_embedding_model_aliases"
        },
        {
            "type": "function",
            "signature": "get_async_model_aliases()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_async_model_aliases",
                217,
                226
            ],
            "id": "llm/__init__.py::get_async_model_aliases"
        },
        {
            "type": "function",
            "signature": "get_model_aliases()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_model_aliases",
                229,
                236
            ],
            "id": "llm/__init__.py::get_model_aliases"
        },
        {
            "type": "class",
            "signature": "UnknownModelError",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::UnknownModelError",
                239,
                240
            ],
            "id": "llm/__init__.py::UnknownModelError"
        },
        {
            "type": "function",
            "signature": "get_models()",
            "docstring": "Get all registered models",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_models",
                243,
                246
            ],
            "id": "llm/__init__.py::get_models"
        },
        {
            "type": "function",
            "signature": "get_async_models()",
            "docstring": "Get all registered async models",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_async_models",
                249,
                252
            ],
            "id": "llm/__init__.py::get_async_models"
        },
        {
            "type": "function",
            "signature": "get_async_model(name)",
            "docstring": "Get an async model by name or alias",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_async_model",
                255,
                271
            ],
            "id": "llm/__init__.py::get_async_model"
        },
        {
            "type": "function",
            "signature": "get_model(name, _skip_async)",
            "docstring": "Get a model by name or alias",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_model",
                274,
                292
            ],
            "id": "llm/__init__.py::get_model"
        },
        {
            "type": "function",
            "signature": "get_key(explicit_key, key_alias, env_var)",
            "docstring": "Return an API key based on a hierarchy of potential sources.\n\n:param provided_key: A key provided by the user. This may be the key, or an alias of a key in keys.json.\n:param key_alias: The alias used to retrieve the key from the keys.json file.\n:param env_var: Name of the environment variable to check for the key.",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_key",
                295,
                319
            ],
            "id": "llm/__init__.py::get_key"
        },
        {
            "type": "function",
            "signature": "load_keys()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::load_keys",
                322,
                327
            ],
            "id": "llm/__init__.py::load_keys"
        },
        {
            "type": "function",
            "signature": "user_dir()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::user_dir",
                330,
                337
            ],
            "id": "llm/__init__.py::user_dir"
        },
        {
            "type": "function",
            "signature": "set_alias(alias, model_id_or_alias)",
            "docstring": "Set an alias to point to the specified model.",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::set_alias",
                340,
                366
            ],
            "id": "llm/__init__.py::set_alias"
        },
        {
            "type": "function",
            "signature": "remove_alias(alias)",
            "docstring": "Remove an alias.",
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::remove_alias",
                369,
                383
            ],
            "id": "llm/__init__.py::remove_alias"
        },
        {
            "type": "function",
            "signature": "encode(values)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::encode",
                386,
                387
            ],
            "id": "llm/__init__.py::encode"
        },
        {
            "type": "function",
            "signature": "decode(binary)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::decode",
                390,
                391
            ],
            "id": "llm/__init__.py::decode"
        },
        {
            "type": "function",
            "signature": "cosine_similarity(a, b)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::cosine_similarity",
                394,
                398
            ],
            "id": "llm/__init__.py::cosine_similarity"
        },
        {
            "type": "function",
            "signature": "get_default_model(filename, default)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_default_model",
                401,
                406
            ],
            "id": "llm/__init__.py::get_default_model"
        },
        {
            "type": "function",
            "signature": "set_default_model(model, filename)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::set_default_model",
                409,
                414
            ],
            "id": "llm/__init__.py::set_default_model"
        },
        {
            "type": "function",
            "signature": "get_default_embedding_model()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::get_default_embedding_model",
                417,
                418
            ],
            "id": "llm/__init__.py::get_default_embedding_model"
        },
        {
            "type": "function",
            "signature": "set_default_embedding_model(model)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/__init__.py",
                "llm/__init__.py::set_default_embedding_model",
                421,
                422
            ],
            "id": "llm/__init__.py::set_default_embedding_model"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/plugins.py",
                "llm/plugins.py",
                1,
                47
            ],
            "id": "llm/plugins.py"
        },
        {
            "type": "global_variable",
            "signature": "DEFAULT_PLUGINS",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/plugins.py",
                "llm/plugins.py::DEFAULT_PLUGINS",
                8,
                8
            ],
            "id": "llm/plugins.py::DEFAULT_PLUGINS"
        },
        {
            "type": "global_variable",
            "signature": "pm",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/plugins.py",
                "llm/plugins.py::pm",
                10,
                10
            ],
            "id": "llm/plugins.py::pm"
        },
        {
            "type": "global_variable",
            "signature": "LLM_LOAD_PLUGINS",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/plugins.py",
                "llm/plugins.py::LLM_LOAD_PLUGINS",
                13,
                13
            ],
            "id": "llm/plugins.py::LLM_LOAD_PLUGINS"
        },
        {
            "type": "global_variable",
            "signature": "_loaded",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/plugins.py",
                "llm/plugins.py::_loaded",
                15,
                15
            ],
            "id": "llm/plugins.py::_loaded"
        },
        {
            "type": "function",
            "signature": "load_plugins()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/plugins.py",
                "llm/plugins.py::load_plugins",
                18,
                47
            ],
            "id": "llm/plugins.py::load_plugins"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py",
                1,
                370
            ],
            "id": "llm/migrations.py"
        },
        {
            "type": "global_variable",
            "signature": "migration",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::migration",
                5,
                5
            ],
            "id": "llm/migrations.py::migration"
        },
        {
            "type": "function",
            "signature": "migrate(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::migrate",
                8,
                21
            ],
            "id": "llm/migrations.py::migrate"
        },
        {
            "type": "function",
            "signature": "ensure_migrations_table(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::ensure_migrations_table",
                24,
                32
            ],
            "id": "llm/migrations.py::ensure_migrations_table"
        },
        {
            "type": "function",
            "signature": "m001_initial(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m001_initial",
                36,
                53
            ],
            "id": "llm/migrations.py::m001_initial"
        },
        {
            "type": "function",
            "signature": "m002_id_primary_key(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m002_id_primary_key",
                57,
                58
            ],
            "id": "llm/migrations.py::m002_id_primary_key"
        },
        {
            "type": "function",
            "signature": "m003_chat_id_foreign_key(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m003_chat_id_foreign_key",
                62,
                64
            ],
            "id": "llm/migrations.py::m003_chat_id_foreign_key"
        },
        {
            "type": "function",
            "signature": "m004_column_order(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m004_column_order",
                68,
                79
            ],
            "id": "llm/migrations.py::m004_column_order"
        },
        {
            "type": "function",
            "signature": "m004_drop_provider(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m004_drop_provider",
                83,
                84
            ],
            "id": "llm/migrations.py::m004_drop_provider"
        },
        {
            "type": "function",
            "signature": "m005_debug(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m005_debug",
                88,
                90
            ],
            "id": "llm/migrations.py::m005_debug"
        },
        {
            "type": "function",
            "signature": "m006_new_logs_table(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m006_new_logs_table",
                94,
                127
            ],
            "id": "llm/migrations.py::m006_new_logs_table"
        },
        {
            "type": "function",
            "signature": "m007_finish_logs_table(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m007_finish_logs_table",
                131,
                138
            ],
            "id": "llm/migrations.py::m007_finish_logs_table"
        },
        {
            "type": "function",
            "signature": "m008_reply_to_id_foreign_key(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m008_reply_to_id_foreign_key",
                142,
                143
            ],
            "id": "llm/migrations.py::m008_reply_to_id_foreign_key"
        },
        {
            "type": "function",
            "signature": "m008_fix_column_order_in_logs(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m008_fix_column_order_in_logs",
                147,
                164
            ],
            "id": "llm/migrations.py::m008_fix_column_order_in_logs"
        },
        {
            "type": "function",
            "signature": "m009_delete_logs_table_if_empty(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m009_delete_logs_table_if_empty",
                168,
                172
            ],
            "id": "llm/migrations.py::m009_delete_logs_table_if_empty"
        },
        {
            "type": "function",
            "signature": "m010_create_new_log_tables(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m010_create_new_log_tables",
                176,
                201
            ],
            "id": "llm/migrations.py::m010_create_new_log_tables"
        },
        {
            "type": "function",
            "signature": "m011_fts_for_responses(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m011_fts_for_responses",
                205,
                206
            ],
            "id": "llm/migrations.py::m011_fts_for_responses"
        },
        {
            "type": "function",
            "signature": "m012_attachments_tables(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m012_attachments_tables",
                210,
                232
            ],
            "id": "llm/migrations.py::m012_attachments_tables"
        },
        {
            "type": "function",
            "signature": "m013_usage(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m013_usage",
                236,
                239
            ],
            "id": "llm/migrations.py::m013_usage"
        },
        {
            "type": "function",
            "signature": "m014_schemas(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m014_schemas",
                243,
                257
            ],
            "id": "llm/migrations.py::m014_schemas"
        },
        {
            "type": "function",
            "signature": "m015_fragments_tables(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m015_fragments_tables",
                261,
                304
            ],
            "id": "llm/migrations.py::m015_fragments_tables"
        },
        {
            "type": "function",
            "signature": "m016_fragments_table_pks(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m016_fragments_table_pks",
                308,
                312
            ],
            "id": "llm/migrations.py::m016_fragments_table_pks"
        },
        {
            "type": "function",
            "signature": "m017_tools_tables(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/migrations.py",
                "llm/migrations.py::m017_tools_tables",
                316,
                370
            ],
            "id": "llm/migrations.py::m017_tools_tables"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/utils.py",
                "llm/utils.py",
                1,
                513
            ],
            "id": "llm/utils.py"
        },
        {
            "type": "global_variable",
            "signature": "MIME_TYPE_FIXES",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::MIME_TYPE_FIXES",
                12,
                14
            ],
            "id": "llm/utils.py::MIME_TYPE_FIXES"
        },
        {
            "type": "class",
            "signature": "Fragment",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::Fragment",
                17,
                27
            ],
            "id": "llm/utils.py::Fragment"
        },
        {
            "type": "method",
            "signature": "__new__(cls, content)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::Fragment::__new__",
                18,
                20
            ],
            "id": "llm/utils.py::Fragment::__new__"
        },
        {
            "type": "method",
            "signature": "__init__(self, content, source)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::Fragment::__init__",
                22,
                24
            ],
            "id": "llm/utils.py::Fragment::__init__"
        },
        {
            "type": "method",
            "signature": "id(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::Fragment::id",
                26,
                27
            ],
            "id": "llm/utils.py::Fragment::id"
        },
        {
            "type": "function",
            "signature": "mimetype_from_string(content)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::mimetype_from_string",
                30,
                35
            ],
            "id": "llm/utils.py::mimetype_from_string"
        },
        {
            "type": "function",
            "signature": "mimetype_from_path(path)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::mimetype_from_path",
                38,
                43
            ],
            "id": "llm/utils.py::mimetype_from_path"
        },
        {
            "type": "function",
            "signature": "dicts_to_table_string(headings, dicts)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::dicts_to_table_string",
                46,
                67
            ],
            "id": "llm/utils.py::dicts_to_table_string"
        },
        {
            "type": "function",
            "signature": "remove_dict_none_values(d)",
            "docstring": "Recursively remove keys with value of None or value of a dict that is all values of None",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::remove_dict_none_values",
                70,
                74
            ],
            "id": "llm/utils.py::remove_dict_none_values"
        },
        {
            "type": "class",
            "signature": "_LogResponse",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_LogResponse",
                77,
                81
            ],
            "id": "llm/utils.py::_LogResponse"
        },
        {
            "type": "method",
            "signature": "iter_bytes(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_LogResponse::iter_bytes",
                78,
                81
            ],
            "id": "llm/utils.py::_LogResponse::iter_bytes"
        },
        {
            "type": "class",
            "signature": "_LogTransport",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_LogTransport",
                84,
                95
            ],
            "id": "llm/utils.py::_LogTransport"
        },
        {
            "type": "method",
            "signature": "__init__(self, transport)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_LogTransport::__init__",
                85,
                86
            ],
            "id": "llm/utils.py::_LogTransport::__init__"
        },
        {
            "type": "method",
            "signature": "handle_request(self, request)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_LogTransport::handle_request",
                88,
                95
            ],
            "id": "llm/utils.py::_LogTransport::handle_request"
        },
        {
            "type": "function",
            "signature": "_no_accept_encoding(request)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_no_accept_encoding",
                98,
                99
            ],
            "id": "llm/utils.py::_no_accept_encoding"
        },
        {
            "type": "function",
            "signature": "_log_response(response)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_log_response",
                102,
                126
            ],
            "id": "llm/utils.py::_log_response"
        },
        {
            "type": "function",
            "signature": "logging_client()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::logging_client",
                129,
                133
            ],
            "id": "llm/utils.py::logging_client"
        },
        {
            "type": "function",
            "signature": "simplify_usage_dict(d)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::simplify_usage_dict",
                136,
                148
            ],
            "id": "llm/utils.py::simplify_usage_dict"
        },
        {
            "type": "function",
            "signature": "remove_empty_and_zero(obj)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::remove_empty_and_zero",
                138,
                146
            ],
            "id": "llm/utils.py::remove_empty_and_zero"
        },
        {
            "type": "function",
            "signature": "token_usage_string(input_tokens, output_tokens, token_details)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::token_usage_string",
                151,
                159
            ],
            "id": "llm/utils.py::token_usage_string"
        },
        {
            "type": "function",
            "signature": "extract_fenced_code_block(text, last)",
            "docstring": "Extracts and returns Markdown fenced code block found in the given text.\n\nThe function handles fenced code blocks that:\n- Use at least three backticks (`).\n- May include a language tag immediately after the opening backticks.\n- Use more than three backticks as long as the closing fence has the same number.\n\nIf no fenced code block is found, the function returns None.\n\nArgs:\n    text (str): The input text to search for a fenced code block.\n    last (bool): Extract the last code block if True, otherwise the first.\n\nReturns:\n    Optional[str]: The content of the fenced code block, or None if not found.",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::extract_fenced_code_block",
                162,
                197
            ],
            "id": "llm/utils.py::extract_fenced_code_block"
        },
        {
            "type": "function",
            "signature": "make_schema_id(schema)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::make_schema_id",
                200,
                203
            ],
            "id": "llm/utils.py::make_schema_id"
        },
        {
            "type": "function",
            "signature": "output_rows_as_json(rows, nl)",
            "docstring": "Output rows as JSON - either newline-delimited or an array\n\nParameters:\n- rows: List of dictionaries to output\n- nl: Boolean, if True, use newline-delimited JSON\n\nReturns:\n- String with formatted JSON output",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::output_rows_as_json",
                206,
                234
            ],
            "id": "llm/utils.py::output_rows_as_json"
        },
        {
            "type": "function",
            "signature": "resolve_schema_input(db, schema_input, load_template)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::resolve_schema_input",
                237,
                272
            ],
            "id": "llm/utils.py::resolve_schema_input"
        },
        {
            "type": "function",
            "signature": "schema_summary(schema)",
            "docstring": "Extract property names from a JSON schema and format them in a\nconcise way that highlights the array/object structure.\n\nArgs:\n    schema (dict): A JSON schema dictionary\n\nReturns:\n    str: A human-friendly summary of the schema structure",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::schema_summary",
                275,
                314
            ],
            "id": "llm/utils.py::schema_summary"
        },
        {
            "type": "function",
            "signature": "schema_dsl(schema_dsl, multi)",
            "docstring": "Build a JSON schema from a concise schema string.\n\nArgs:\n    schema_dsl: A string representing a schema in the concise format.\n        Can be comma-separated or newline-separated.\n    multi: Boolean, return a schema for an \"items\" array of these\n\nReturns:\n    A dictionary representing the JSON schema.",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::schema_dsl",
                317,
                382
            ],
            "id": "llm/utils.py::schema_dsl"
        },
        {
            "type": "function",
            "signature": "multi_schema(schema)",
            "docstring": "Wrap JSON schema in an 'items': [] array",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::multi_schema",
                385,
                391
            ],
            "id": "llm/utils.py::multi_schema"
        },
        {
            "type": "function",
            "signature": "find_unused_key(item, key)",
            "docstring": "Return unused key, e.g. for {\"id\": \"1\"} and key \"id\" returns \"id_\"",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::find_unused_key",
                394,
                398
            ],
            "id": "llm/utils.py::find_unused_key"
        },
        {
            "type": "function",
            "signature": "truncate_string(text, max_length, normalize_whitespace, keep_end)",
            "docstring": "Truncate a string to a maximum length, with options to normalize whitespace and keep both start and end.\n\nArgs:\n    text: The string to truncate\n    max_length: Maximum length of the result string\n    normalize_whitespace: If True, replace all whitespace with a single space\n    keep_end: If True, keep both beginning and end of string\n\nReturns:\n    Truncated string",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::truncate_string",
                401,
                438
            ],
            "id": "llm/utils.py::truncate_string"
        },
        {
            "type": "function",
            "signature": "ensure_fragment(db, content)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::ensure_fragment",
                441,
                455
            ],
            "id": "llm/utils.py::ensure_fragment"
        },
        {
            "type": "function",
            "signature": "ensure_tool(db, tool)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::ensure_tool",
                458,
                476
            ],
            "id": "llm/utils.py::ensure_tool"
        },
        {
            "type": "function",
            "signature": "maybe_fenced_code(content)",
            "docstring": "Return the content as a fenced code block if it looks like code",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::maybe_fenced_code",
                479,
                505
            ],
            "id": "llm/utils.py::maybe_fenced_code"
        },
        {
            "type": "global_variable",
            "signature": "_plugin_prefix_re",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::_plugin_prefix_re",
                508,
                508
            ],
            "id": "llm/utils.py::_plugin_prefix_re"
        },
        {
            "type": "function",
            "signature": "has_plugin_prefix(value)",
            "docstring": "Check if value starts with alphanumeric prefix followed by a colon",
            "layer": 3,
            "loc": [
                "llm/utils.py",
                "llm/utils.py::has_plugin_prefix",
                511,
                513
            ],
            "id": "llm/utils.py::has_plugin_prefix"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/models.py",
                "llm/models.py",
                1,
                1488
            ],
            "id": "llm/models.py"
        },
        {
            "type": "global_variable",
            "signature": "CONVERSATION_NAME_LENGTH",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/models.py",
                "llm/models.py::CONVERSATION_NAME_LENGTH",
                39,
                39
            ],
            "id": "llm/models.py::CONVERSATION_NAME_LENGTH"
        },
        {
            "type": "class",
            "signature": "Usage",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Usage",
                43,
                46
            ],
            "id": "llm/models.py::Usage"
        },
        {
            "type": "class",
            "signature": "Attachment",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Attachment",
                50,
                106
            ],
            "id": "llm/models.py::Attachment"
        },
        {
            "type": "method",
            "signature": "id(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Attachment::id",
                57,
                68
            ],
            "id": "llm/models.py::Attachment::id"
        },
        {
            "type": "method",
            "signature": "resolve_type(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Attachment::resolve_type",
                70,
                82
            ],
            "id": "llm/models.py::Attachment::resolve_type"
        },
        {
            "type": "method",
            "signature": "content_bytes(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Attachment::content_bytes",
                84,
                93
            ],
            "id": "llm/models.py::Attachment::content_bytes"
        },
        {
            "type": "method",
            "signature": "base64_content(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Attachment::base64_content",
                95,
                96
            ],
            "id": "llm/models.py::Attachment::base64_content"
        },
        {
            "type": "method",
            "signature": "from_row(cls, row)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Attachment::from_row",
                99,
                106
            ],
            "id": "llm/models.py::Attachment::from_row"
        },
        {
            "type": "class",
            "signature": "Tool",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Tool",
                110,
                175
            ],
            "id": "llm/models.py::Tool"
        },
        {
            "type": "method",
            "signature": "__post_init__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Tool::__post_init__",
                116,
                118
            ],
            "id": "llm/models.py::Tool::__post_init__"
        },
        {
            "type": "method",
            "signature": "_ensure_dict_schema(self, schema)",
            "docstring": "Convert a Pydantic model to a JSON schema dict if needed.",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Tool::_ensure_dict_schema",
                120,
                129
            ],
            "id": "llm/models.py::Tool::_ensure_dict_schema"
        },
        {
            "type": "method",
            "signature": "hash(self)",
            "docstring": "Hash for tool based on its name, description and input schema (preserving key order)",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Tool::hash",
                131,
                138
            ],
            "id": "llm/models.py::Tool::hash"
        },
        {
            "type": "method",
            "signature": "function(cls, function, name)",
            "docstring": "Turn a Python function into a Tool object by:\n - Extracting the function name\n - Using the function docstring for the Tool description\n - Building a Pydantic model for inputs by inspecting the function signature\n - Building a Pydantic model for the return value by using the function's return annotation",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Tool::function",
                141,
                175
            ],
            "id": "llm/models.py::Tool::function"
        },
        {
            "type": "global_variable",
            "signature": "ToolDef",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/models.py",
                "llm/models.py::ToolDef",
                178,
                178
            ],
            "id": "llm/models.py::ToolDef"
        },
        {
            "type": "class",
            "signature": "ToolCall",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::ToolCall",
                182,
                185
            ],
            "id": "llm/models.py::ToolCall"
        },
        {
            "type": "class",
            "signature": "ToolResult",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::ToolResult",
                189,
                192
            ],
            "id": "llm/models.py::ToolResult"
        },
        {
            "type": "class",
            "signature": "CancelToolCall",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::CancelToolCall",
                195,
                196
            ],
            "id": "llm/models.py::CancelToolCall"
        },
        {
            "type": "class",
            "signature": "Prompt",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Prompt",
                200,
                253
            ],
            "id": "llm/models.py::Prompt"
        },
        {
            "type": "method",
            "signature": "__init__(self, prompt, model)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Prompt::__init__",
                213,
                240
            ],
            "id": "llm/models.py::Prompt::__init__"
        },
        {
            "type": "method",
            "signature": "prompt(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Prompt::prompt",
                243,
                244
            ],
            "id": "llm/models.py::Prompt::prompt"
        },
        {
            "type": "method",
            "signature": "system(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Prompt::system",
                247,
                253
            ],
            "id": "llm/models.py::Prompt::system"
        },
        {
            "type": "function",
            "signature": "_wrap_tools(tools)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_wrap_tools",
                256,
                265
            ],
            "id": "llm/models.py::_wrap_tools"
        },
        {
            "type": "class",
            "signature": "_BaseConversation",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseConversation",
                269,
                278
            ],
            "id": "llm/models.py::_BaseConversation"
        },
        {
            "type": "method",
            "signature": "from_row(cls, row)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseConversation::from_row",
                277,
                278
            ],
            "id": "llm/models.py::_BaseConversation::from_row"
        },
        {
            "type": "class",
            "signature": "Conversation",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Conversation",
                282,
                373
            ],
            "id": "llm/models.py::Conversation"
        },
        {
            "type": "method",
            "signature": "prompt(self, prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Conversation::prompt",
                283,
                315
            ],
            "id": "llm/models.py::Conversation::prompt"
        },
        {
            "type": "method",
            "signature": "chain(self, prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Conversation::chain",
                317,
                358
            ],
            "id": "llm/models.py::Conversation::chain"
        },
        {
            "type": "method",
            "signature": "from_row(cls, row)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Conversation::from_row",
                361,
                368
            ],
            "id": "llm/models.py::Conversation::from_row"
        },
        {
            "type": "method",
            "signature": "__repr__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Conversation::__repr__",
                370,
                373
            ],
            "id": "llm/models.py::Conversation::__repr__"
        },
        {
            "type": "class",
            "signature": "AsyncConversation",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncConversation",
                377,
                425
            ],
            "id": "llm/models.py::AsyncConversation"
        },
        {
            "type": "method",
            "signature": "prompt(self, prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncConversation::prompt",
                378,
                410
            ],
            "id": "llm/models.py::AsyncConversation::prompt"
        },
        {
            "type": "method",
            "signature": "from_row(cls, row)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncConversation::from_row",
                413,
                420
            ],
            "id": "llm/models.py::AsyncConversation::from_row"
        },
        {
            "type": "method",
            "signature": "__repr__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncConversation::__repr__",
                422,
                425
            ],
            "id": "llm/models.py::AsyncConversation::__repr__"
        },
        {
            "type": "global_variable",
            "signature": "FRAGMENT_SQL",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/models.py",
                "llm/models.py::FRAGMENT_SQL",
                428,
                445
            ],
            "id": "llm/models.py::FRAGMENT_SQL"
        },
        {
            "type": "class",
            "signature": "_BaseResponse",
            "docstring": "Base response class shared between sync and async responses",
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse",
                448,
                753
            ],
            "id": "llm/models.py::_BaseResponse"
        },
        {
            "type": "method",
            "signature": "__init__(self, prompt, model, stream, conversation, key)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse::__init__",
                458,
                490
            ],
            "id": "llm/models.py::_BaseResponse::__init__"
        },
        {
            "type": "method",
            "signature": "add_tool_call(self, tool_call)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse::add_tool_call",
                492,
                493
            ],
            "id": "llm/models.py::_BaseResponse::add_tool_call"
        },
        {
            "type": "method",
            "signature": "set_usage(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse::set_usage",
                495,
                504
            ],
            "id": "llm/models.py::_BaseResponse::set_usage"
        },
        {
            "type": "method",
            "signature": "from_row(cls, db, row, _async)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse::from_row",
                507,
                613
            ],
            "id": "llm/models.py::_BaseResponse::from_row"
        },
        {
            "type": "method",
            "signature": "token_usage(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse::token_usage",
                615,
                618
            ],
            "id": "llm/models.py::_BaseResponse::token_usage"
        },
        {
            "type": "method",
            "signature": "log_to_db(self, db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseResponse::log_to_db",
                620,
                753
            ],
            "id": "llm/models.py::_BaseResponse::log_to_db"
        },
        {
            "type": "class",
            "signature": "Response",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response",
                756,
                888
            ],
            "id": "llm/models.py::Response"
        },
        {
            "type": "method",
            "signature": "on_done(self, callback)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::on_done",
                760,
                764
            ],
            "id": "llm/models.py::Response::on_done"
        },
        {
            "type": "method",
            "signature": "_on_done(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::_on_done",
                766,
                768
            ],
            "id": "llm/models.py::Response::_on_done"
        },
        {
            "type": "method",
            "signature": "__str__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::__str__",
                770,
                771
            ],
            "id": "llm/models.py::Response::__str__"
        },
        {
            "type": "method",
            "signature": "_force(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::_force",
                773,
                775
            ],
            "id": "llm/models.py::Response::_force"
        },
        {
            "type": "method",
            "signature": "text(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::text",
                777,
                779
            ],
            "id": "llm/models.py::Response::text"
        },
        {
            "type": "method",
            "signature": "text_or_raise(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::text_or_raise",
                781,
                782
            ],
            "id": "llm/models.py::Response::text_or_raise"
        },
        {
            "type": "method",
            "signature": "execute_tool_calls(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::execute_tool_calls",
                784,
                818
            ],
            "id": "llm/models.py::Response::execute_tool_calls"
        },
        {
            "type": "method",
            "signature": "tool_calls(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::tool_calls",
                820,
                822
            ],
            "id": "llm/models.py::Response::tool_calls"
        },
        {
            "type": "method",
            "signature": "tool_calls_or_raise(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::tool_calls_or_raise",
                824,
                825
            ],
            "id": "llm/models.py::Response::tool_calls_or_raise"
        },
        {
            "type": "method",
            "signature": "json(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::json",
                827,
                829
            ],
            "id": "llm/models.py::Response::json"
        },
        {
            "type": "method",
            "signature": "duration_ms(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::duration_ms",
                831,
                833
            ],
            "id": "llm/models.py::Response::duration_ms"
        },
        {
            "type": "method",
            "signature": "datetime_utc(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::datetime_utc",
                835,
                837
            ],
            "id": "llm/models.py::Response::datetime_utc"
        },
        {
            "type": "method",
            "signature": "usage(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::usage",
                839,
                845
            ],
            "id": "llm/models.py::Response::usage"
        },
        {
            "type": "method",
            "signature": "__iter__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::__iter__",
                847,
                882
            ],
            "id": "llm/models.py::Response::__iter__"
        },
        {
            "type": "method",
            "signature": "__repr__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Response::__repr__",
                884,
                888
            ],
            "id": "llm/models.py::Response::__repr__"
        },
        {
            "type": "class",
            "signature": "AsyncResponse",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse",
                891,
                1054
            ],
            "id": "llm/models.py::AsyncResponse"
        },
        {
            "type": "method",
            "signature": "from_row(cls, db, row, _async)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::from_row",
                896,
                897
            ],
            "id": "llm/models.py::AsyncResponse::from_row"
        },
        {
            "type": "method",
            "signature": "__aiter__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::__aiter__",
                915,
                918
            ],
            "id": "llm/models.py::AsyncResponse::__aiter__"
        },
        {
            "type": "method",
            "signature": "text_or_raise(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::text_or_raise",
                967,
                970
            ],
            "id": "llm/models.py::AsyncResponse::text_or_raise"
        },
        {
            "type": "method",
            "signature": "tool_calls_or_raise(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::tool_calls_or_raise",
                980,
                983
            ],
            "id": "llm/models.py::AsyncResponse::tool_calls_or_raise"
        },
        {
            "type": "method",
            "signature": "__await__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::__await__",
                1005,
                1006
            ],
            "id": "llm/models.py::AsyncResponse::__await__"
        },
        {
            "type": "method",
            "signature": "fake(cls, model, prompt)",
            "docstring": "Utility method to help with writing tests",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::fake",
                1027,
                1048
            ],
            "id": "llm/models.py::AsyncResponse::fake"
        },
        {
            "type": "method",
            "signature": "__repr__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncResponse::__repr__",
                1050,
                1054
            ],
            "id": "llm/models.py::AsyncResponse::__repr__"
        },
        {
            "type": "class",
            "signature": "_BaseChainResponse",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseChainResponse",
                1057,
                1143
            ],
            "id": "llm/models.py::_BaseChainResponse"
        },
        {
            "type": "method",
            "signature": "__init__(self, prompt, model, stream, conversation, key, details, chain_limit, before_call, after_call)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseChainResponse::__init__",
                1064,
                1086
            ],
            "id": "llm/models.py::_BaseChainResponse::__init__"
        },
        {
            "type": "method",
            "signature": "responses(self, details)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseChainResponse::responses",
                1088,
                1127
            ],
            "id": "llm/models.py::_BaseChainResponse::responses"
        },
        {
            "type": "method",
            "signature": "__iter__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseChainResponse::__iter__",
                1129,
                1134
            ],
            "id": "llm/models.py::_BaseChainResponse::__iter__"
        },
        {
            "type": "method",
            "signature": "text(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseChainResponse::text",
                1136,
                1137
            ],
            "id": "llm/models.py::_BaseChainResponse::text"
        },
        {
            "type": "method",
            "signature": "log_to_db(self, db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseChainResponse::log_to_db",
                1139,
                1143
            ],
            "id": "llm/models.py::_BaseChainResponse::log_to_db"
        },
        {
            "type": "class",
            "signature": "ChainResponse",
            "docstring": "Know how to chain multiple responses e.g. for tool calls",
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::ChainResponse",
                1146,
                1147
            ],
            "id": "llm/models.py::ChainResponse"
        },
        {
            "type": "class",
            "signature": "Options",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Options",
                1199,
                1200
            ],
            "id": "llm/models.py::Options"
        },
        {
            "type": "global_variable",
            "signature": "_Options",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/models.py",
                "llm/models.py::_Options",
                1154,
                1154
            ],
            "id": "llm/models.py::_Options"
        },
        {
            "type": "class",
            "signature": "_get_key_mixin",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_get_key_mixin",
                1157,
                1188
            ],
            "id": "llm/models.py::_get_key_mixin"
        },
        {
            "type": "method",
            "signature": "get_key(self, explicit_key)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_get_key_mixin::get_key",
                1162,
                1188
            ],
            "id": "llm/models.py::_get_key_mixin::get_key"
        },
        {
            "type": "class",
            "signature": "_BaseModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseModel",
                1191,
                1223
            ],
            "id": "llm/models.py::_BaseModel"
        },
        {
            "type": "method",
            "signature": "_validate_attachments(self, attachments)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseModel::_validate_attachments",
                1202,
                1213
            ],
            "id": "llm/models.py::_BaseModel::_validate_attachments"
        },
        {
            "type": "method",
            "signature": "__str__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseModel::__str__",
                1215,
                1220
            ],
            "id": "llm/models.py::_BaseModel::__str__"
        },
        {
            "type": "method",
            "signature": "__repr__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_BaseModel::__repr__",
                1222,
                1223
            ],
            "id": "llm/models.py::_BaseModel::__repr__"
        },
        {
            "type": "class",
            "signature": "_Model",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_Model",
                1226,
                1297
            ],
            "id": "llm/models.py::_Model"
        },
        {
            "type": "method",
            "signature": "conversation(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_Model::conversation",
                1227,
                1228
            ],
            "id": "llm/models.py::_Model::conversation"
        },
        {
            "type": "method",
            "signature": "prompt(self, prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_Model::prompt",
                1230,
                1262
            ],
            "id": "llm/models.py::_Model::prompt"
        },
        {
            "type": "method",
            "signature": "chain(self, prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_Model::chain",
                1264,
                1297
            ],
            "id": "llm/models.py::_Model::chain"
        },
        {
            "type": "class",
            "signature": "Model",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::Model",
                1300,
                1309
            ],
            "id": "llm/models.py::Model"
        },
        {
            "type": "method",
            "signature": "execute(self, prompt, stream, response, conversation)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::Model::execute",
                1302,
                1309
            ],
            "id": "llm/models.py::Model::execute"
        },
        {
            "type": "class",
            "signature": "KeyModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::KeyModel",
                1312,
                1322
            ],
            "id": "llm/models.py::KeyModel"
        },
        {
            "type": "method",
            "signature": "execute(self, prompt, stream, response, conversation, key)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::KeyModel::execute",
                1314,
                1322
            ],
            "id": "llm/models.py::KeyModel::execute"
        },
        {
            "type": "class",
            "signature": "_AsyncModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::_AsyncModel",
                1325,
                1364
            ],
            "id": "llm/models.py::_AsyncModel"
        },
        {
            "type": "method",
            "signature": "conversation(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_AsyncModel::conversation",
                1326,
                1327
            ],
            "id": "llm/models.py::_AsyncModel::conversation"
        },
        {
            "type": "method",
            "signature": "prompt(self, prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_AsyncModel::prompt",
                1329,
                1361
            ],
            "id": "llm/models.py::_AsyncModel::prompt"
        },
        {
            "type": "method",
            "signature": "chain(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_AsyncModel::chain",
                1363,
                1364
            ],
            "id": "llm/models.py::_AsyncModel::chain"
        },
        {
            "type": "class",
            "signature": "AsyncModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncModel",
                1367,
                1376
            ],
            "id": "llm/models.py::AsyncModel"
        },
        {
            "type": "class",
            "signature": "AsyncKeyModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::AsyncKeyModel",
                1379,
                1389
            ],
            "id": "llm/models.py::AsyncKeyModel"
        },
        {
            "type": "class",
            "signature": "EmbeddingModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel",
                1392,
                1450
            ],
            "id": "llm/models.py::EmbeddingModel"
        },
        {
            "type": "method",
            "signature": "_check(self, item)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::_check",
                1401,
                1409
            ],
            "id": "llm/models.py::EmbeddingModel::_check"
        },
        {
            "type": "method",
            "signature": "embed(self, item)",
            "docstring": "Embed a single text string or binary blob, return a list of floats",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::embed",
                1411,
                1414
            ],
            "id": "llm/models.py::EmbeddingModel::embed"
        },
        {
            "type": "method",
            "signature": "embed_multi(self, items, batch_size)",
            "docstring": "Embed multiple items in batches according to the model batch_size",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::embed_multi",
                1416,
                1437
            ],
            "id": "llm/models.py::EmbeddingModel::embed_multi"
        },
        {
            "type": "method",
            "signature": "checking_iter(items)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::checking_iter",
                1424,
                1427
            ],
            "id": "llm/models.py::EmbeddingModel::checking_iter"
        },
        {
            "type": "method",
            "signature": "embed_batch(self, items)",
            "docstring": "Embed a batch of strings or blobs, return a list of lists of floats",
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::embed_batch",
                1440,
                1444
            ],
            "id": "llm/models.py::EmbeddingModel::embed_batch"
        },
        {
            "type": "method",
            "signature": "__str__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::__str__",
                1446,
                1447
            ],
            "id": "llm/models.py::EmbeddingModel::__str__"
        },
        {
            "type": "method",
            "signature": "__repr__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModel::__repr__",
                1449,
                1450
            ],
            "id": "llm/models.py::EmbeddingModel::__repr__"
        },
        {
            "type": "class",
            "signature": "ModelWithAliases",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::ModelWithAliases",
                1454,
                1467
            ],
            "id": "llm/models.py::ModelWithAliases"
        },
        {
            "type": "method",
            "signature": "matches(self, query)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::ModelWithAliases::matches",
                1459,
                1467
            ],
            "id": "llm/models.py::ModelWithAliases::matches"
        },
        {
            "type": "class",
            "signature": "EmbeddingModelWithAliases",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModelWithAliases",
                1471,
                1480
            ],
            "id": "llm/models.py::EmbeddingModelWithAliases"
        },
        {
            "type": "method",
            "signature": "matches(self, query)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::EmbeddingModelWithAliases::matches",
                1475,
                1480
            ],
            "id": "llm/models.py::EmbeddingModelWithAliases::matches"
        },
        {
            "type": "function",
            "signature": "_conversation_name(text)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/models.py",
                "llm/models.py::_conversation_name",
                1483,
                1488
            ],
            "id": "llm/models.py::_conversation_name"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/templates.py",
                "llm/templates.py",
                1,
                78
            ],
            "id": "llm/templates.py"
        },
        {
            "type": "class",
            "signature": "AttachmentType",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::AttachmentType",
                6,
                8
            ],
            "id": "llm/templates.py::AttachmentType"
        },
        {
            "type": "class",
            "signature": "Template",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::Template",
                11,
                78
            ],
            "id": "llm/templates.py::Template"
        },
        {
            "type": "class",
            "signature": "MissingVariables",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::MissingVariables",
                28,
                29
            ],
            "id": "llm/templates.py::MissingVariables"
        },
        {
            "type": "method",
            "signature": "evaluate(self, input, params)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::Template::evaluate",
                31,
                48
            ],
            "id": "llm/templates.py::Template::evaluate"
        },
        {
            "type": "method",
            "signature": "vars(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::Template::vars",
                50,
                56
            ],
            "id": "llm/templates.py::Template::vars"
        },
        {
            "type": "method",
            "signature": "interpolate(cls, text, params)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::Template::interpolate",
                59,
                70
            ],
            "id": "llm/templates.py::Template::interpolate"
        },
        {
            "type": "method",
            "signature": "extract_vars(string_template)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/templates.py",
                "llm/templates.py::Template::extract_vars",
                73,
                78
            ],
            "id": "llm/templates.py::Template::extract_vars"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py",
                1,
                93
            ],
            "id": "llm/embeddings_migrations.py"
        },
        {
            "type": "global_variable",
            "signature": "embeddings_migrations",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::embeddings_migrations",
                5,
                5
            ],
            "id": "llm/embeddings_migrations.py::embeddings_migrations"
        },
        {
            "type": "function",
            "signature": "m001_create_tables(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::m001_create_tables",
                9,
                21
            ],
            "id": "llm/embeddings_migrations.py::m001_create_tables"
        },
        {
            "type": "function",
            "signature": "m002_foreign_key(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::m002_foreign_key",
                25,
                26
            ],
            "id": "llm/embeddings_migrations.py::m002_foreign_key"
        },
        {
            "type": "function",
            "signature": "m003_add_updated(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::m003_add_updated",
                30,
                37
            ],
            "id": "llm/embeddings_migrations.py::m003_add_updated"
        },
        {
            "type": "function",
            "signature": "m004_store_content_hash(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::m004_store_content_hash",
                41,
                85
            ],
            "id": "llm/embeddings_migrations.py::m004_store_content_hash"
        },
        {
            "type": "function",
            "signature": "md5(text)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::md5",
                56,
                57
            ],
            "id": "llm/embeddings_migrations.py::md5"
        },
        {
            "type": "function",
            "signature": "random_md5()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::random_md5",
                59,
                60
            ],
            "id": "llm/embeddings_migrations.py::random_md5"
        },
        {
            "type": "function",
            "signature": "m005_add_content_blob(db)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings_migrations.py",
                "llm/embeddings_migrations.py::m005_add_content_blob",
                89,
                93
            ],
            "id": "llm/embeddings_migrations.py::m005_add_content_blob"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/errors.py",
                "llm/errors.py",
                1,
                6
            ],
            "id": "llm/errors.py"
        },
        {
            "type": "class",
            "signature": "ModelError",
            "docstring": "Models can raise this error, which will be displayed to the user",
            "layer": 2,
            "loc": [
                "llm/errors.py",
                "llm/errors.py::ModelError",
                1,
                2
            ],
            "id": "llm/errors.py::ModelError"
        },
        {
            "type": "class",
            "signature": "NeedsKeyException",
            "docstring": "Model needs an API key which has not been provided",
            "layer": 2,
            "loc": [
                "llm/errors.py",
                "llm/errors.py::NeedsKeyException",
                5,
                6
            ],
            "id": "llm/errors.py::NeedsKeyException"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py",
                1,
                35
            ],
            "id": "llm/hookspecs.py"
        },
        {
            "type": "global_variable",
            "signature": "hookspec",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::hookspec",
                4,
                4
            ],
            "id": "llm/hookspecs.py::hookspec"
        },
        {
            "type": "global_variable",
            "signature": "hookimpl",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::hookimpl",
                5,
                5
            ],
            "id": "llm/hookspecs.py::hookimpl"
        },
        {
            "type": "function",
            "signature": "register_commands(cli)",
            "docstring": "Register additional CLI commands, e.g. 'llm mycommand ...'",
            "layer": 3,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::register_commands",
                9,
                10
            ],
            "id": "llm/hookspecs.py::register_commands"
        },
        {
            "type": "function",
            "signature": "register_models(register)",
            "docstring": "Register additional model instances representing LLM models that can be called",
            "layer": 3,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::register_models",
                14,
                15
            ],
            "id": "llm/hookspecs.py::register_models"
        },
        {
            "type": "function",
            "signature": "register_embedding_models(register)",
            "docstring": "Register additional model instances that can be used for embedding",
            "layer": 3,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::register_embedding_models",
                19,
                20
            ],
            "id": "llm/hookspecs.py::register_embedding_models"
        },
        {
            "type": "function",
            "signature": "register_template_loaders(register)",
            "docstring": "Register additional template loaders with prefixes",
            "layer": 3,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::register_template_loaders",
                24,
                25
            ],
            "id": "llm/hookspecs.py::register_template_loaders"
        },
        {
            "type": "function",
            "signature": "register_fragment_loaders(register)",
            "docstring": "Register additional fragment loaders with prefixes",
            "layer": 3,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::register_fragment_loaders",
                29,
                30
            ],
            "id": "llm/hookspecs.py::register_fragment_loaders"
        },
        {
            "type": "function",
            "signature": "register_tools(register)",
            "docstring": "Register functions that can be used as tools by the LLMs",
            "layer": 3,
            "loc": [
                "llm/hookspecs.py",
                "llm/hookspecs.py::register_tools",
                34,
                35
            ],
            "id": "llm/hookspecs.py::register_tools"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py",
                1,
                351
            ],
            "id": "llm/embeddings.py"
        },
        {
            "type": "class",
            "signature": "Entry",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Entry",
                14,
                18
            ],
            "id": "llm/embeddings.py::Entry"
        },
        {
            "type": "class",
            "signature": "Collection",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection",
                21,
                351
            ],
            "id": "llm/embeddings.py::Collection"
        },
        {
            "type": "class",
            "signature": "DoesNotExist",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::DoesNotExist",
                22,
                23
            ],
            "id": "llm/embeddings.py::DoesNotExist"
        },
        {
            "type": "method",
            "signature": "__init__(self, name, db)",
            "docstring": "A collection of embeddings\n\nReturns the collection with the given name, creating it if it does not exist.\n\nIf you set create=False a Collection.DoesNotExist exception will be raised if the\ncollection does not already exist.\n\nArgs:\n    db (sqlite_utils.Database): Database to store the collection in\n    name (str): Name of the collection\n    model (llm.models.EmbeddingModel, optional): Embedding model to use\n    model_id (str, optional): Alternatively, ID of the embedding model to use\n    create (bool, optional): Whether to create the collection if it does not exist",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::__init__",
                25,
                86
            ],
            "id": "llm/embeddings.py::Collection::__init__"
        },
        {
            "type": "method",
            "signature": "model(self)",
            "docstring": "Return the embedding model used by this collection",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::model",
                88,
                95
            ],
            "id": "llm/embeddings.py::Collection::model"
        },
        {
            "type": "method",
            "signature": "count(self)",
            "docstring": "Count the number of items in the collection.\n\nReturns:\n    int: Number of items in the collection",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::count",
                97,
                113
            ],
            "id": "llm/embeddings.py::Collection::count"
        },
        {
            "type": "method",
            "signature": "embed(self, id, value, metadata, store)",
            "docstring": "Embed value and store it in the collection with a given ID.\n\nArgs:\n    id (str): ID for the value\n    value (str or bytes): value to be embedded\n    metadata (dict, optional): Metadata to be stored\n    store (bool, optional): Whether to store the value in the content or content_blob column",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::embed",
                115,
                151
            ],
            "id": "llm/embeddings.py::Collection::embed"
        },
        {
            "type": "method",
            "signature": "embed_multi(self, entries, store, batch_size)",
            "docstring": "Embed multiple texts and store them in the collection with given IDs.\n\nArgs:\n    entries (iterable): Iterable of (id: str, text: str) tuples\n    store (bool, optional): Whether to store the text in the content column\n    batch_size (int, optional): custom maximum batch size to use",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::embed_multi",
                153,
                171
            ],
            "id": "llm/embeddings.py::Collection::embed_multi"
        },
        {
            "type": "method",
            "signature": "embed_multi_with_metadata(self, entries, store, batch_size)",
            "docstring": "Embed multiple values along with metadata and store them in the collection with given IDs.\n\nArgs:\n    entries (iterable): Iterable of (id: str, value: str or bytes, metadata: None or dict)\n    store (bool, optional): Whether to store the value in the content or content_blob column\n    batch_size (int, optional): custom maximum batch size to use",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::embed_multi_with_metadata",
                173,
                238
            ],
            "id": "llm/embeddings.py::Collection::embed_multi_with_metadata"
        },
        {
            "type": "method",
            "signature": "similar_by_vector(self, vector, number, skip_id)",
            "docstring": "Find similar items in the collection by a given vector.\n\nArgs:\n    vector (list): Vector to search by\n    number (int, optional): Number of similar items to return\n\nReturns:\n    list: List of Entry objects",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::similar_by_vector",
                240,
                287
            ],
            "id": "llm/embeddings.py::Collection::similar_by_vector"
        },
        {
            "type": "method",
            "signature": "distance_score(other_encoded)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::distance_score",
                255,
                257
            ],
            "id": "llm/embeddings.py::Collection::distance_score"
        },
        {
            "type": "method",
            "signature": "similar_by_id(self, id, number)",
            "docstring": "Find similar items in the collection by a given ID.\n\nArgs:\n    id (str): ID to search by\n    number (int, optional): Number of similar items to return\n\nReturns:\n    list: List of Entry objects",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::similar_by_id",
                289,
                311
            ],
            "id": "llm/embeddings.py::Collection::similar_by_id"
        },
        {
            "type": "method",
            "signature": "similar(self, value, number)",
            "docstring": "Find similar items in the collection by a given value.\n\nArgs:\n    value (str or bytes): value to search by\n    number (int, optional): Number of similar items to return\n\nReturns:\n    list: List of Entry objects",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::similar",
                313,
                325
            ],
            "id": "llm/embeddings.py::Collection::similar"
        },
        {
            "type": "method",
            "signature": "exists(cls, db, name)",
            "docstring": "Does this collection exist in the database?\n\nArgs:\n    name (str): Name of the collection",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::exists",
                328,
                336
            ],
            "id": "llm/embeddings.py::Collection::exists"
        },
        {
            "type": "method",
            "signature": "delete(self)",
            "docstring": "Delete the collection and its embeddings from the database",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::delete",
                338,
                344
            ],
            "id": "llm/embeddings.py::Collection::delete"
        },
        {
            "type": "method",
            "signature": "content_hash(input)",
            "docstring": "Hash content for deduplication. Override to change hashing behavior.",
            "layer": 3,
            "loc": [
                "llm/embeddings.py",
                "llm/embeddings.py::Collection::content_hash",
                347,
                351
            ],
            "id": "llm/embeddings.py::Collection::content_hash"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/cli.py",
                "llm/cli.py",
                1,
                3604
            ],
            "id": "llm/cli.py"
        },
        {
            "type": "global_variable",
            "signature": "DEFAULT_TEMPLATE",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::DEFAULT_TEMPLATE",
                82,
                82
            ],
            "id": "llm/cli.py::DEFAULT_TEMPLATE"
        },
        {
            "type": "class",
            "signature": "FragmentNotFound",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::FragmentNotFound",
                85,
                86
            ],
            "id": "llm/cli.py::FragmentNotFound"
        },
        {
            "type": "function",
            "signature": "validate_fragment_alias(ctx, param, value)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::validate_fragment_alias",
                89,
                92
            ],
            "id": "llm/cli.py::validate_fragment_alias"
        },
        {
            "type": "function",
            "signature": "resolve_fragments(db, fragments, allow_attachments)",
            "docstring": "Resolve fragment strings into a mixed of llm.Fragment() and llm.Attachment() objects.",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::resolve_fragments",
                95,
                163
            ],
            "id": "llm/cli.py::resolve_fragments"
        },
        {
            "type": "function",
            "signature": "_load_by_alias(fragment)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::_load_by_alias",
                102,
                116
            ],
            "id": "llm/cli.py::_load_by_alias"
        },
        {
            "type": "class",
            "signature": "AttachmentError",
            "docstring": "Exception raised for errors in attachment resolution.",
            "layer": 2,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::AttachmentError",
                166,
                169
            ],
            "id": "llm/cli.py::AttachmentError"
        },
        {
            "type": "function",
            "signature": "resolve_attachment(value)",
            "docstring": "Resolve an attachment from a string value which could be:\n- \"-\" for stdin\n- A URL\n- A file path\n\nReturns an Attachment object.\nRaises AttachmentError if the attachment cannot be resolved.",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::resolve_attachment",
                172,
                211
            ],
            "id": "llm/cli.py::resolve_attachment"
        },
        {
            "type": "class",
            "signature": "AttachmentType",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::AttachmentType",
                214,
                221
            ],
            "id": "llm/cli.py::AttachmentType"
        },
        {
            "type": "method",
            "signature": "convert(self, value, param, ctx)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::AttachmentType::convert",
                217,
                221
            ],
            "id": "llm/cli.py::AttachmentType::convert"
        },
        {
            "type": "function",
            "signature": "resolve_attachment_with_type(value, mimetype)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::resolve_attachment_with_type",
                224,
                237
            ],
            "id": "llm/cli.py::resolve_attachment_with_type"
        },
        {
            "type": "function",
            "signature": "attachment_types_callback(ctx, param, values)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::attachment_types_callback",
                240,
                244
            ],
            "id": "llm/cli.py::attachment_types_callback"
        },
        {
            "type": "function",
            "signature": "json_validator(object_name)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::json_validator",
                247,
                259
            ],
            "id": "llm/cli.py::json_validator"
        },
        {
            "type": "function",
            "signature": "validator(ctx, param, value)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::validator",
                248,
                257
            ],
            "id": "llm/cli.py::validator"
        },
        {
            "type": "function",
            "signature": "schema_option(fn)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::schema_option",
                262,
                268
            ],
            "id": "llm/cli.py::schema_option"
        },
        {
            "type": "function",
            "signature": "cli()",
            "docstring": "Access Large Language Models from the command-line\n\nDocumentation: https://llm.datasette.io/\n\nLLM can run models from many different providers. Consult the\nplugin directory for a list of available models:\n\nhttps://llm.datasette.io/en/stable/plugins/directory.html\n\nTo get started with OpenAI, obtain an API key from them and:\n\n\b\n    $ llm keys set openai\n    Enter key: ...\n\nThen execute a prompt like this:\n\n    llm 'Five outrageous names for a pet pelican'\n\nFor a full list of prompting options run:\n\n    llm prompt --help",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::cli",
                277,
                301
            ],
            "id": "llm/cli.py::cli"
        },
        {
            "type": "function",
            "signature": "prompt(prompt, system, model_id, database, queries, attachments, attachment_types, tools, python_tools, tools_debug, tools_approve, chain_limit, options, schema_input, schema_multi, fragments, system_fragments, template, param, no_stream, no_log, log, _continue, conversation_id, key, save, async_, usage, extract, extract_last)",
            "docstring": "Execute a prompt\n\nDocumentation: https://llm.datasette.io/en/stable/usage.html\n\nExamples:\n\n\b\n    llm 'Capital of France?'\n    llm 'Capital of France?' -m gpt-4o\n    llm 'Capital of France?' -s 'answer in Spanish'\n\nMulti-modal models can be called with attachments like this:\n\n\b\n    llm 'Extract text from this image' -a image.jpg\n    llm 'Describe' -a https://static.simonwillison.net/static/2024/pelicans.jpg\n    cat image | llm 'describe image' -a -\n    # With an explicit mimetype:\n    cat image | llm 'describe image' --at - image/jpeg\n\nThe -x/--extract option returns just the content of the first ``` fenced code\nblock, if one is present. If none are present it returns the full response.\n\n\b\n    llm 'JavaScript function for reversing a string' -x",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::prompt",
                438,
                911
            ],
            "id": "llm/cli.py::prompt"
        },
        {
            "type": "function",
            "signature": "read_prompt()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::read_prompt",
                528,
                553
            ],
            "id": "llm/cli.py::read_prompt"
        },
        {
            "type": "function",
            "signature": "debug_tool_call(_, tool_call, tool_result)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::debug_tool_call",
                779,
                795
            ],
            "id": "llm/cli.py::debug_tool_call"
        },
        {
            "type": "function",
            "signature": "approve_tool_call(_, tool_call)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::approve_tool_call",
                800,
                810
            ],
            "id": "llm/cli.py::approve_tool_call"
        },
        {
            "type": "function",
            "signature": "chat(system, model_id, _continue, conversation_id, template, param, options, no_stream, key, database)",
            "docstring": "Hold an ongoing chat with a model.",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::chat",
                955,
                1095
            ],
            "id": "llm/cli.py::chat"
        },
        {
            "type": "function",
            "signature": "load_conversation(conversation_id, async_, database)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::load_conversation",
                1098,
                1127
            ],
            "id": "llm/cli.py::load_conversation"
        },
        {
            "type": "function",
            "signature": "keys()",
            "docstring": "Manage stored API keys for different models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::keys",
                1135,
                1136
            ],
            "id": "llm/cli.py::keys"
        },
        {
            "type": "function",
            "signature": "keys_list()",
            "docstring": "List names of all stored keys",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::keys_list",
                1140,
                1149
            ],
            "id": "llm/cli.py::keys_list"
        },
        {
            "type": "function",
            "signature": "keys_path_command()",
            "docstring": "Output the path to the keys.json file",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::keys_path_command",
                1153,
                1155
            ],
            "id": "llm/cli.py::keys_path_command"
        },
        {
            "type": "function",
            "signature": "keys_get(name)",
            "docstring": "Return the value of a stored key\n\nExample usage:\n\n\b\n    export OPENAI_API_KEY=$(llm keys get openai)",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::keys_get",
                1160,
                1176
            ],
            "id": "llm/cli.py::keys_get"
        },
        {
            "type": "function",
            "signature": "keys_set(name, value)",
            "docstring": "Save a key in the keys.json file\n\nExample usage:\n\n\b\n    $ llm keys set openai\n    Enter key: ...",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::keys_set",
                1182,
                1203
            ],
            "id": "llm/cli.py::keys_set"
        },
        {
            "type": "function",
            "signature": "logs()",
            "docstring": "Tools for exploring logged prompts and responses",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs",
                1211,
                1212
            ],
            "id": "llm/cli.py::logs"
        },
        {
            "type": "function",
            "signature": "logs_path()",
            "docstring": "Output the path to the logs.db file",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_path",
                1216,
                1218
            ],
            "id": "llm/cli.py::logs_path"
        },
        {
            "type": "function",
            "signature": "logs_status()",
            "docstring": "Show current status of database logging",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_status",
                1222,
                1239
            ],
            "id": "llm/cli.py::logs_status"
        },
        {
            "type": "function",
            "signature": "backup(path)",
            "docstring": "Backup your logs database to this file",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::backup",
                1244,
                1255
            ],
            "id": "llm/cli.py::backup"
        },
        {
            "type": "function",
            "signature": "logs_turn_on()",
            "docstring": "Turn on logging for all prompts",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_turn_on",
                1259,
                1263
            ],
            "id": "llm/cli.py::logs_turn_on"
        },
        {
            "type": "function",
            "signature": "logs_turn_off()",
            "docstring": "Turn off logging for all prompts",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_turn_off",
                1267,
                1270
            ],
            "id": "llm/cli.py::logs_turn_off"
        },
        {
            "type": "global_variable",
            "signature": "LOGS_COLUMNS",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::LOGS_COLUMNS",
                1273,
                1289
            ],
            "id": "llm/cli.py::LOGS_COLUMNS"
        },
        {
            "type": "global_variable",
            "signature": "LOGS_SQL",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::LOGS_SQL",
                1291,
                1299
            ],
            "id": "llm/cli.py::LOGS_SQL"
        },
        {
            "type": "global_variable",
            "signature": "LOGS_SQL_SEARCH",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::LOGS_SQL_SEARCH",
                1300,
                1310
            ],
            "id": "llm/cli.py::LOGS_SQL_SEARCH"
        },
        {
            "type": "global_variable",
            "signature": "ATTACHMENTS_SQL",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::ATTACHMENTS_SQL",
                1312,
                1325
            ],
            "id": "llm/cli.py::ATTACHMENTS_SQL"
        },
        {
            "type": "function",
            "signature": "logs_list(count, path, database, model, query, fragments, schema_input, schema_multi, data, data_array, data_key, data_ids, truncate, short, usage, response, extract, extract_last, current_conversation, conversation_id, id_gt, id_gte, json_output, expand)",
            "docstring": "Show logged prompts and their responses",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_list",
                1413,
                1936
            ],
            "id": "llm/cli.py::logs_list"
        },
        {
            "type": "function",
            "signature": "_display_fragments(fragments, title)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::_display_fragments",
                1751,
                1768
            ],
            "id": "llm/cli.py::_display_fragments"
        },
        {
            "type": "function",
            "signature": "models()",
            "docstring": "Manage available models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::models",
                1944,
                1945
            ],
            "id": "llm/cli.py::models"
        },
        {
            "type": "global_variable",
            "signature": "_type_lookup",
            "docstring": null,
            "layer": 4,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::_type_lookup",
                1948,
                1953
            ],
            "id": "llm/cli.py::_type_lookup"
        },
        {
            "type": "function",
            "signature": "models_list(options, async_, schemas, tools, query, model_ids)",
            "docstring": "List available models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::models_list",
                1970,
                2051
            ],
            "id": "llm/cli.py::models_list"
        },
        {
            "type": "function",
            "signature": "models_default(model)",
            "docstring": "Show or set the default model",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::models_default",
                2056,
                2066
            ],
            "id": "llm/cli.py::models_default"
        },
        {
            "type": "function",
            "signature": "templates()",
            "docstring": "Manage stored prompt templates",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::templates",
                2074,
                2075
            ],
            "id": "llm/cli.py::templates"
        },
        {
            "type": "function",
            "signature": "templates_list()",
            "docstring": "List available prompt templates",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::templates_list",
                2079,
                2106
            ],
            "id": "llm/cli.py::templates_list"
        },
        {
            "type": "function",
            "signature": "templates_show(name)",
            "docstring": "Show the specified prompt template",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::templates_show",
                2111,
                2120
            ],
            "id": "llm/cli.py::templates_show"
        },
        {
            "type": "function",
            "signature": "templates_edit(name)",
            "docstring": "Edit the specified prompt template using the default $EDITOR",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::templates_edit",
                2125,
                2133
            ],
            "id": "llm/cli.py::templates_edit"
        },
        {
            "type": "function",
            "signature": "templates_path()",
            "docstring": "Output the path to the templates directory",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::templates_path",
                2137,
                2139
            ],
            "id": "llm/cli.py::templates_path"
        },
        {
            "type": "function",
            "signature": "templates_loaders()",
            "docstring": "Show template loaders registered by plugins",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::templates_loaders",
                2143,
                2154
            ],
            "id": "llm/cli.py::templates_loaders"
        },
        {
            "type": "function",
            "signature": "schemas()",
            "docstring": "Manage stored schemas",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::schemas",
                2162,
                2163
            ],
            "id": "llm/cli.py::schemas"
        },
        {
            "type": "function",
            "signature": "schemas_list(path, database, queries, full)",
            "docstring": "List stored schemas",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::schemas_list",
                2188,
                2242
            ],
            "id": "llm/cli.py::schemas_list"
        },
        {
            "type": "function",
            "signature": "schemas_show(schema_id, path, database)",
            "docstring": "Show a stored schema",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::schemas_show",
                2260,
                2274
            ],
            "id": "llm/cli.py::schemas_show"
        },
        {
            "type": "function",
            "signature": "schemas_dsl_debug(input, multi)",
            "docstring": "Convert LLM's schema DSL to a JSON schema\n\n\b\n    llm schema dsl 'name, age int, bio: their bio'",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::schemas_dsl_debug",
                2280,
                2288
            ],
            "id": "llm/cli.py::schemas_dsl_debug"
        },
        {
            "type": "function",
            "signature": "tools()",
            "docstring": "Manage tools that can be made available to LLMs",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::tools",
                2296,
                2297
            ],
            "id": "llm/cli.py::tools"
        },
        {
            "type": "function",
            "signature": "tools_list(json_, python_tools)",
            "docstring": "List available tools that have been provided by plugins",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::tools_list",
                2308,
                2335
            ],
            "id": "llm/cli.py::tools_list"
        },
        {
            "type": "function",
            "signature": "aliases()",
            "docstring": "Manage model aliases",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::aliases",
                2343,
                2344
            ],
            "id": "llm/cli.py::aliases"
        },
        {
            "type": "function",
            "signature": "aliases_list(json_)",
            "docstring": "List current aliases",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::aliases_list",
                2349,
                2370
            ],
            "id": "llm/cli.py::aliases_list"
        },
        {
            "type": "function",
            "signature": "aliases_set(alias, model_id, query)",
            "docstring": "Set an alias for a model\n\nExample usage:\n\n\b\n    llm aliases set mini gpt-4o-mini\n\nAlternatively you can omit the model ID and specify one or more -q options.\nThe first model matching all of those query strings will be used.\n\n\b\n    llm aliases set mini -q 4o -q mini",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::aliases_set",
                2382,
                2419
            ],
            "id": "llm/cli.py::aliases_set"
        },
        {
            "type": "function",
            "signature": "aliases_remove(alias)",
            "docstring": "Remove an alias\n\nExample usage:\n\n\b\n    $ llm aliases remove turbo",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::aliases_remove",
                2424,
                2436
            ],
            "id": "llm/cli.py::aliases_remove"
        },
        {
            "type": "function",
            "signature": "aliases_path()",
            "docstring": "Output the path to the aliases.json file",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::aliases_path",
                2440,
                2442
            ],
            "id": "llm/cli.py::aliases_path"
        },
        {
            "type": "function",
            "signature": "fragments()",
            "docstring": "Manage fragments that are stored in the database\n\nFragments are reusable snippets of text that are shared across multiple prompts.",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::fragments",
                2450,
                2455
            ],
            "id": "llm/cli.py::fragments"
        },
        {
            "type": "function",
            "signature": "fragments_list(queries, aliases, json_)",
            "docstring": "List current fragments",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::fragments_list",
                2468,
                2526
            ],
            "id": "llm/cli.py::fragments_list"
        },
        {
            "type": "function",
            "signature": "fragments_set(alias, fragment)",
            "docstring": "Set an alias for a fragment\n\nAccepts an alias and a file path, URL, hash or '-' for stdin\n\nExample usage:\n\n\b\n    llm fragments set mydocs ./docs.md",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::fragments_set",
                2532,
                2558
            ],
            "id": "llm/cli.py::fragments_set"
        },
        {
            "type": "function",
            "signature": "fragments_show(alias_or_hash)",
            "docstring": "Display the fragment stored under an alias or hash\n\n\b\n    llm fragments show mydocs",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::fragments_show",
                2563,
                2576
            ],
            "id": "llm/cli.py::fragments_show"
        },
        {
            "type": "function",
            "signature": "fragments_remove(alias)",
            "docstring": "Remove a fragment alias\n\nExample usage:\n\n\b\n    llm fragments remove docs",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::fragments_remove",
                2581,
                2595
            ],
            "id": "llm/cli.py::fragments_remove"
        },
        {
            "type": "function",
            "signature": "fragments_loaders()",
            "docstring": "Show fragment loaders registered by plugins",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::fragments_loaders",
                2599,
                2615
            ],
            "id": "llm/cli.py::fragments_loaders"
        },
        {
            "type": "function",
            "signature": "plugins_list(all)",
            "docstring": "List installed plugins",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::plugins_list",
                2620,
                2622
            ],
            "id": "llm/cli.py::plugins_list"
        },
        {
            "type": "function",
            "signature": "display_truncated(text)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::display_truncated",
                2625,
                2630
            ],
            "id": "llm/cli.py::display_truncated"
        },
        {
            "type": "function",
            "signature": "install(packages, upgrade, editable, force_reinstall, no_cache_dir)",
            "docstring": "Install packages from PyPI into the same environment as LLM",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::install",
                2653,
                2666
            ],
            "id": "llm/cli.py::install"
        },
        {
            "type": "function",
            "signature": "uninstall(packages, yes)",
            "docstring": "Uninstall Python packages from the LLM environment",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::uninstall",
                2672,
                2675
            ],
            "id": "llm/cli.py::uninstall"
        },
        {
            "type": "function",
            "signature": "embed(collection, id, input, model, store, database, content, binary, metadata, format_)",
            "docstring": "Embed text and store or return the result",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::embed",
                2715,
                2792
            ],
            "id": "llm/cli.py::embed"
        },
        {
            "type": "function",
            "signature": "get_db()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::get_db",
                2726,
                2730
            ],
            "id": "llm/cli.py::get_db"
        },
        {
            "type": "function",
            "signature": "embed_multi(collection, input_path, format, files, encodings, binary, sql, attach, batch_size, prefix, model, prepend, store, database)",
            "docstring": "Store embeddings for multiple strings at once in the specified collection.\n\nInput data can come from one of three sources:\n\n\b\n1. A CSV, TSV, JSON or JSONL file:\n   - CSV/TSV: First column is ID, remaining columns concatenated as content\n   - JSON: Array of objects with \"id\" field and content fields\n   - JSONL: Newline-delimited JSON objects\n\n\b\n   Examples:\n     llm embed-multi docs input.csv\n     cat data.json | llm embed-multi docs -\n     llm embed-multi docs input.json --format json\n\n\b\n2. A SQL query against a SQLite database:\n   - First column returned is used as ID\n   - Other columns concatenated to form content\n\n\b\n   Examples:\n     llm embed-multi docs --sql \"SELECT id, title, body FROM posts\"\n     llm embed-multi docs --attach blog blog.db --sql \"SELECT id, content FROM blog.posts\"\n\n\b\n3. Files in directories matching glob patterns:\n   - Each file becomes one embedding\n   - Relative file paths become IDs\n\n\b\n   Examples:\n     llm embed-multi docs --files docs '**/*.md'\n     llm embed-multi images --files photos '*.jpg' --binary\n     llm embed-multi texts --files texts '*.txt' --encoding utf-8 --encoding latin-1",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::embed_multi",
                2845,
                3015
            ],
            "id": "llm/cli.py::embed_multi"
        },
        {
            "type": "function",
            "signature": "count_files()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::count_files",
                2933,
                2938
            ],
            "id": "llm/cli.py::count_files"
        },
        {
            "type": "function",
            "signature": "iterate_files()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::iterate_files",
                2940,
                2966
            ],
            "id": "llm/cli.py::iterate_files"
        },
        {
            "type": "function",
            "signature": "load_rows(fp)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::load_rows",
                2976,
                2977
            ],
            "id": "llm/cli.py::load_rows"
        },
        {
            "type": "function",
            "signature": "tuples()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::tuples",
                2999,
                3010
            ],
            "id": "llm/cli.py::tuples"
        },
        {
            "type": "function",
            "signature": "similar(collection, id, input, content, binary, number, plain, database)",
            "docstring": "Return top N similar IDs from a collection using cosine similarity.\n\nExample usage:\n\n\b\n    llm similar my-collection -c \"I like cats\"\n\nOr to find content similar to a specific stored ID:\n\n\b\n    llm similar my-collection 1234",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::similar",
                3039,
                3098
            ],
            "id": "llm/cli.py::similar"
        },
        {
            "type": "function",
            "signature": "embed_models()",
            "docstring": "Manage available embedding models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::embed_models",
                3106,
                3107
            ],
            "id": "llm/cli.py::embed_models"
        },
        {
            "type": "function",
            "signature": "embed_models_list(query)",
            "docstring": "List available embedding models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::embed_models_list",
                3117,
                3128
            ],
            "id": "llm/cli.py::embed_models_list"
        },
        {
            "type": "function",
            "signature": "embed_models_default(model, remove_default)",
            "docstring": "Show or set the default embedding model",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::embed_models_default",
                3136,
                3153
            ],
            "id": "llm/cli.py::embed_models_default"
        },
        {
            "type": "function",
            "signature": "collections()",
            "docstring": "View and manage collections of embeddings",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::collections",
                3161,
                3162
            ],
            "id": "llm/cli.py::collections"
        },
        {
            "type": "function",
            "signature": "collections_path()",
            "docstring": "Output the path to the embeddings database",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::collections_path",
                3166,
                3168
            ],
            "id": "llm/cli.py::collections_path"
        },
        {
            "type": "function",
            "signature": "embed_db_collections(database, json_)",
            "docstring": "View a list of collections",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::embed_db_collections",
                3180,
                3208
            ],
            "id": "llm/cli.py::embed_db_collections"
        },
        {
            "type": "function",
            "signature": "collections_delete(collection, database)",
            "docstring": "Delete the specified collection\n\nExample usage:\n\n\b\n    llm collections delete my-collection",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::collections_delete",
                3220,
                3235
            ],
            "id": "llm/cli.py::collections_delete"
        },
        {
            "type": "function",
            "signature": "options()",
            "docstring": "Manage default options for models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::options",
                3243,
                3244
            ],
            "id": "llm/cli.py::options"
        },
        {
            "type": "function",
            "signature": "options_list()",
            "docstring": "List default options for all models\n\nExample usage:\n\n\b\n    llm models options list",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::options_list",
                3248,
                3265
            ],
            "id": "llm/cli.py::options_list"
        },
        {
            "type": "function",
            "signature": "options_show(model)",
            "docstring": "List default options set for a specific model\n\nExample usage:\n\n\b\n    llm models options show gpt-4o",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::options_show",
                3270,
                3295
            ],
            "id": "llm/cli.py::options_show"
        },
        {
            "type": "function",
            "signature": "options_set(model, key, value)",
            "docstring": "Set a default option for a model\n\nExample usage:\n\n\b\n    llm models options set gpt-4o temperature 0.5",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::options_set",
                3302,
                3331
            ],
            "id": "llm/cli.py::options_set"
        },
        {
            "type": "function",
            "signature": "options_clear(model, key)",
            "docstring": "Clear default option(s) for a model\n\nExample usage:\n\n\b\n    llm models options clear gpt-4o\n    # Or for a single option\n    llm models options clear gpt-4o temperature",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::options_clear",
                3337,
                3372
            ],
            "id": "llm/cli.py::options_clear"
        },
        {
            "type": "function",
            "signature": "template_dir()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::template_dir",
                3375,
                3378
            ],
            "id": "llm/cli.py::template_dir"
        },
        {
            "type": "function",
            "signature": "logs_db_path()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_db_path",
                3381,
                3382
            ],
            "id": "llm/cli.py::logs_db_path"
        },
        {
            "type": "function",
            "signature": "get_history(chat_id)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::get_history",
                3385,
                3401
            ],
            "id": "llm/cli.py::get_history"
        },
        {
            "type": "function",
            "signature": "render_errors(errors)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::render_errors",
                3404,
                3409
            ],
            "id": "llm/cli.py::render_errors"
        },
        {
            "type": "function",
            "signature": "_human_readable_size(size_bytes)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::_human_readable_size",
                3417,
                3428
            ],
            "id": "llm/cli.py::_human_readable_size"
        },
        {
            "type": "function",
            "signature": "logs_on()",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::logs_on",
                3431,
                3432
            ],
            "id": "llm/cli.py::logs_on"
        },
        {
            "type": "function",
            "signature": "get_all_model_options()",
            "docstring": "Get all default options for all models",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::get_all_model_options",
                3435,
                3448
            ],
            "id": "llm/cli.py::get_all_model_options"
        },
        {
            "type": "function",
            "signature": "get_model_options(model_id)",
            "docstring": "Get default options for a specific model\n\nArgs:\n    model_id: Return options for model with this ID\n\nReturns:\n    A dictionary of model options",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::get_model_options",
                3451,
                3470
            ],
            "id": "llm/cli.py::get_model_options"
        },
        {
            "type": "function",
            "signature": "set_model_option(model_id, key, value)",
            "docstring": "Set a default option for a model.\n\nArgs:\n    model_id: The model ID\n    key: The option key\n    value: The option value",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::set_model_option",
                3473,
                3499
            ],
            "id": "llm/cli.py::set_model_option"
        },
        {
            "type": "function",
            "signature": "clear_model_option(model_id, key)",
            "docstring": "Clear a model option\n\nArgs:\n    model_id: The model ID\n    key: Key to clear",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::clear_model_option",
                3502,
                3527
            ],
            "id": "llm/cli.py::clear_model_option"
        },
        {
            "type": "class",
            "signature": "LoadTemplateError",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::LoadTemplateError",
                3530,
                3531
            ],
            "id": "llm/cli.py::LoadTemplateError"
        },
        {
            "type": "function",
            "signature": "_parse_yaml_template(name, content)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::_parse_yaml_template",
                3534,
                3547
            ],
            "id": "llm/cli.py::_parse_yaml_template"
        },
        {
            "type": "function",
            "signature": "load_template(name)",
            "docstring": "Load template, or raise LoadTemplateError(msg)",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::load_template",
                3550,
                3582
            ],
            "id": "llm/cli.py::load_template"
        },
        {
            "type": "function",
            "signature": "_tools_from_code(code_or_path)",
            "docstring": "Treat all Python functions in the code as tools",
            "layer": 3,
            "loc": [
                "llm/cli.py",
                "llm/cli.py::_tools_from_code",
                3585,
                3604
            ],
            "id": "llm/cli.py::_tools_from_code"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py",
                1,
                926
            ],
            "id": "llm/default_plugins/openai_models.py"
        },
        {
            "type": "function",
            "signature": "register_models(register)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::register_models",
                24,
                213
            ],
            "id": "llm/default_plugins/openai_models.py::register_models"
        },
        {
            "type": "function",
            "signature": "register_embedding_models(register)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::register_embedding_models",
                217,
                251
            ],
            "id": "llm/default_plugins/openai_models.py::register_embedding_models"
        },
        {
            "type": "class",
            "signature": "OpenAIEmbeddingModel",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel",
                254,
                273
            ],
            "id": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel"
        },
        {
            "type": "method",
            "signature": "__init__(self, model_id, openai_model_id, dimensions)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel::__init__",
                259,
                262
            ],
            "id": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel::__init__"
        },
        {
            "type": "method",
            "signature": "embed_batch(self, items)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel::embed_batch",
                264,
                273
            ],
            "id": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel::embed_batch"
        },
        {
            "type": "function",
            "signature": "register_commands(cli)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::register_commands",
                277,
                316
            ],
            "id": "llm/default_plugins/openai_models.py::register_commands"
        },
        {
            "type": "function",
            "signature": "openai_()",
            "docstring": "Commands for working directly with the OpenAI API",
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::openai_",
                279,
                280
            ],
            "id": "llm/default_plugins/openai_models.py::openai_"
        },
        {
            "type": "function",
            "signature": "models(json_, key)",
            "docstring": "List models available to you from the OpenAI API",
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::models",
                285,
                316
            ],
            "id": "llm/default_plugins/openai_models.py::models"
        },
        {
            "type": "class",
            "signature": "SharedOptions",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::SharedOptions",
                319,
                404
            ],
            "id": "llm/default_plugins/openai_models.py::SharedOptions"
        },
        {
            "type": "method",
            "signature": "validate_logit_bias(cls, logit_bias)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::SharedOptions::validate_logit_bias",
                382,
                404
            ],
            "id": "llm/default_plugins/openai_models.py::SharedOptions::validate_logit_bias"
        },
        {
            "type": "class",
            "signature": "ReasoningEffortEnum",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::ReasoningEffortEnum",
                407,
                410
            ],
            "id": "llm/default_plugins/openai_models.py::ReasoningEffortEnum"
        },
        {
            "type": "class",
            "signature": "OptionsForReasoning",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::OptionsForReasoning",
                413,
                425
            ],
            "id": "llm/default_plugins/openai_models.py::OptionsForReasoning"
        },
        {
            "type": "function",
            "signature": "_attachment(attachment)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_attachment",
                428,
                454
            ],
            "id": "llm/default_plugins/openai_models.py::_attachment"
        },
        {
            "type": "class",
            "signature": "_Shared",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared",
                457,
                655
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared"
        },
        {
            "type": "method",
            "signature": "__init__(self, model_id, key, model_name, api_base, api_type, api_version, api_engine, headers, can_stream, vision, audio, reasoning, supports_schema, supports_tools, allows_system_prompt)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared::__init__",
                458,
                512
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared::__init__"
        },
        {
            "type": "method",
            "signature": "__str__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared::__str__",
                514,
                515
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared::__str__"
        },
        {
            "type": "method",
            "signature": "build_messages(self, prompt, conversation)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared::build_messages",
                517,
                592
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared::build_messages"
        },
        {
            "type": "method",
            "signature": "set_usage(self, response, usage)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared::set_usage",
                594,
                602
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared::set_usage"
        },
        {
            "type": "method",
            "signature": "get_client(self, key)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared::get_client",
                604,
                627
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared::get_client"
        },
        {
            "type": "method",
            "signature": "build_kwargs(self, prompt, stream)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::_Shared::build_kwargs",
                629,
                655
            ],
            "id": "llm/default_plugins/openai_models.py::_Shared::build_kwargs"
        },
        {
            "type": "class",
            "signature": "Chat",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Chat",
                658,
                735
            ],
            "id": "llm/default_plugins/openai_models.py::Chat"
        },
        {
            "type": "class",
            "signature": "Options",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Options",
                793,
                798
            ],
            "id": "llm/default_plugins/openai_models.py::Options"
        },
        {
            "type": "method",
            "signature": "execute(self, prompt, stream, response, conversation, key)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Chat::execute",
                669,
                735
            ],
            "id": "llm/default_plugins/openai_models.py::Chat::execute"
        },
        {
            "type": "class",
            "signature": "AsyncChat",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::AsyncChat",
                738,
                789
            ],
            "id": "llm/default_plugins/openai_models.py::AsyncChat"
        },
        {
            "type": "class",
            "signature": "Completion",
            "docstring": null,
            "layer": 2,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Completion",
                792,
                848
            ],
            "id": "llm/default_plugins/openai_models.py::Completion"
        },
        {
            "type": "method",
            "signature": "__init__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Completion::__init__",
                800,
                802
            ],
            "id": "llm/default_plugins/openai_models.py::Completion::__init__"
        },
        {
            "type": "method",
            "signature": "__str__(self)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Completion::__str__",
                804,
                805
            ],
            "id": "llm/default_plugins/openai_models.py::Completion::__str__"
        },
        {
            "type": "method",
            "signature": "execute(self, prompt, stream, response, conversation, key)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::Completion::execute",
                807,
                848
            ],
            "id": "llm/default_plugins/openai_models.py::Completion::execute"
        },
        {
            "type": "function",
            "signature": "not_nulls(data)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::not_nulls",
                851,
                852
            ],
            "id": "llm/default_plugins/openai_models.py::not_nulls"
        },
        {
            "type": "function",
            "signature": "combine_chunks(chunks)",
            "docstring": null,
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::combine_chunks",
                855,
                900
            ],
            "id": "llm/default_plugins/openai_models.py::combine_chunks"
        },
        {
            "type": "function",
            "signature": "redact_data(input_dict)",
            "docstring": "Recursively search through the input dictionary for any 'image_url' keys\nand modify the 'url' value to be just 'data:...'.\n\nAlso redact input_audio.data keys",
            "layer": 3,
            "loc": [
                "llm/default_plugins/openai_models.py",
                "llm/default_plugins/openai_models.py::redact_data",
                903,
                926
            ],
            "id": "llm/default_plugins/openai_models.py::redact_data"
        },
        {
            "type": "file",
            "signature": null,
            "docstring": null,
            "layer": 1,
            "loc": [
                "llm/default_plugins/__init__.py",
                "llm/default_plugins/__init__.py",
                1,
                0
            ],
            "id": "llm/default_plugins/__init__.py"
        }
    ],
    "links": [
        {
            "edge_type": "contains",
            "source": ".",
            "target": "docs"
        },
        {
            "edge_type": "contains",
            "source": ".",
            "target": "tests"
        },
        {
            "edge_type": "contains",
            "source": ".",
            "target": ".ropeproject"
        },
        {
            "edge_type": "contains",
            "source": ".",
            "target": ".github"
        },
        {
            "edge_type": "contains",
            "source": ".",
            "target": "llm"
        },
        {
            "edge_type": "contains",
            "source": "docs",
            "target": "docs/_templates"
        },
        {
            "edge_type": "contains",
            "source": "docs",
            "target": "docs/plugins"
        },
        {
            "edge_type": "contains",
            "source": "docs",
            "target": "docs/embeddings"
        },
        {
            "edge_type": "contains",
            "source": "docs",
            "target": "docs/conf.py"
        },
        {
            "edge_type": "contains",
            "source": ".github",
            "target": ".github/workflows"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/default_plugins"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/__main__.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/vua_utils.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/__init__.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/plugins.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/migrations.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/utils.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/models.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/templates.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/embeddings_migrations.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/errors.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/hookspecs.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/embeddings.py"
        },
        {
            "edge_type": "contains",
            "source": "llm",
            "target": "llm/cli.py"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins",
            "target": "docs/plugins/llm-markov"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::extensions"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::myst_enable_extensions"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::templates_path"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::source_suffix"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::master_doc"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::project"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::copyright"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::author"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::pipe"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::git_version"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::version"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::release"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::language"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::exclude_patterns"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::pygments_style"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::todo_include_todos"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::html_theme"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::html_theme_options"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::html_title"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::html_static_path"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::htmlhelp_basename"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::latex_elements"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::latex_documents"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::man_pages"
        },
        {
            "edge_type": "contains",
            "source": "docs/conf.py",
            "target": "docs/conf.py::texinfo_documents"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov",
            "target": "docs/plugins/llm-markov/llm_markov.py"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py",
            "target": "docs/plugins/llm-markov/llm_markov.py::register_models"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py",
            "target": "docs/plugins/llm-markov/llm_markov.py::build_markov_table"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py",
            "target": "docs/plugins/llm-markov/llm_markov.py::generate"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py",
            "target": "docs/plugins/llm-markov/llm_markov.py::Markov"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py",
            "target": "docs/plugins/llm-markov/llm_markov.py::Options"
        },
        {
            "edge_type": "references",
            "source": "docs/plugins/llm-markov/llm_markov.py::register_models",
            "target": "llm/__init__.py::register"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py::Markov",
            "target": "docs/plugins/llm-markov/llm_markov.py::Markov::execute"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py::Options",
            "target": "docs/plugins/llm-markov/llm_markov.py::Options::validate_length"
        },
        {
            "edge_type": "contains",
            "source": "docs/plugins/llm-markov/llm_markov.py::Options",
            "target": "docs/plugins/llm-markov/llm_markov.py::Options::validate_delay"
        },
        {
            "edge_type": "references",
            "source": "docs/plugins/llm-markov/llm_markov.py::Markov::execute",
            "target": "docs/plugins/llm-markov/llm_markov.py::build_markov_table"
        },
        {
            "edge_type": "references",
            "source": "docs/plugins/llm-markov/llm_markov.py::Markov::execute",
            "target": "docs/plugins/llm-markov/llm_markov.py::generate"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins",
            "target": "llm/default_plugins/openai_models.py"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins",
            "target": "llm/default_plugins/__init__.py"
        },
        {
            "edge_type": "contains",
            "source": "llm/vua_utils.py",
            "target": "llm/vua_utils.py::vua_remove_dict_none_values"
        },
        {
            "edge_type": "references",
            "source": "llm/vua_utils.py::vua_remove_dict_none_values",
            "target": "llm/utils.py::remove_dict_none_values"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::__all__"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::DEFAULT_MODEL"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_plugins"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::register"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::_get_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_template_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_fragment_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_tools"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_embedding_models_with_aliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_embedding_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_embedding_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_embedding_model_aliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_async_model_aliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_model_aliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::UnknownModelError"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_async_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_async_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::load_keys"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::set_alias"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::remove_alias"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::encode"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::decode"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::cosine_similarity"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::set_default_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::get_default_embedding_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/__init__.py",
            "target": "llm/__init__.py::set_default_embedding_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_models_with_aliases",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::_get_loaders",
            "target": "llm/plugins.py::load_plugins"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_template_loaders",
            "target": "llm/__init__.py::_get_loaders"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_fragment_loaders",
            "target": "llm/__init__.py::_get_loaders"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_tools",
            "target": "llm/plugins.py::load_plugins"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_embedding_models_with_aliases",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_embedding_model",
            "target": "llm/__init__.py::get_embedding_model_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_embedding_model_aliases",
            "target": "llm/__init__.py::get_embedding_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_async_model_aliases",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_model_aliases",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_models",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_async_models",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_async_model",
            "target": "llm/__init__.py::get_async_model_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_async_model",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_async_model",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_model",
            "target": "llm/__init__.py::get_model_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_model",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_model",
            "target": "llm/__init__.py::get_async_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_key",
            "target": "llm/__init__.py::load_keys"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::load_keys",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::set_alias",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::set_alias",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::set_alias",
            "target": "llm/__init__.py::get_embedding_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::remove_alias",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_default_model",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::set_default_model",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::get_default_embedding_model",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/__init__.py::set_default_embedding_model",
            "target": "llm/__init__.py::set_default_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/plugins.py",
            "target": "llm/plugins.py::DEFAULT_PLUGINS"
        },
        {
            "edge_type": "contains",
            "source": "llm/plugins.py",
            "target": "llm/plugins.py::pm"
        },
        {
            "edge_type": "contains",
            "source": "llm/plugins.py",
            "target": "llm/plugins.py::LLM_LOAD_PLUGINS"
        },
        {
            "edge_type": "contains",
            "source": "llm/plugins.py",
            "target": "llm/plugins.py::_loaded"
        },
        {
            "edge_type": "contains",
            "source": "llm/plugins.py",
            "target": "llm/plugins.py::load_plugins"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::migration"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::ensure_migrations_table"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m001_initial"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m002_id_primary_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m003_chat_id_foreign_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m004_column_order"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m004_drop_provider"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m005_debug"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m006_new_logs_table"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m007_finish_logs_table"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m008_reply_to_id_foreign_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m008_fix_column_order_in_logs"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m009_delete_logs_table_if_empty"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m010_create_new_log_tables"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m011_fts_for_responses"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m012_attachments_tables"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m013_usage"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m014_schemas"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m015_fragments_tables"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m016_fragments_table_pks"
        },
        {
            "edge_type": "contains",
            "source": "llm/migrations.py",
            "target": "llm/migrations.py::m017_tools_tables"
        },
        {
            "edge_type": "references",
            "source": "llm/migrations.py::migrate",
            "target": "llm/migrations.py::ensure_migrations_table"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::MIME_TYPE_FIXES"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::Fragment"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::mimetype_from_string"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::mimetype_from_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::dicts_to_table_string"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::remove_dict_none_values"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::_LogResponse"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::_LogTransport"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::_no_accept_encoding"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::_log_response"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::logging_client"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::simplify_usage_dict"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::remove_empty_and_zero"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::token_usage_string"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::extract_fenced_code_block"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::make_schema_id"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::output_rows_as_json"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::resolve_schema_input"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::schema_summary"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::schema_dsl"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::multi_schema"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::find_unused_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::truncate_string"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::ensure_fragment"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::ensure_tool"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::maybe_fenced_code"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::_plugin_prefix_re"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py",
            "target": "llm/utils.py::has_plugin_prefix"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py::Fragment",
            "target": "llm/utils.py::Fragment::__new__"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py::Fragment",
            "target": "llm/utils.py::Fragment::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py::Fragment",
            "target": "llm/utils.py::Fragment::id"
        },
        {
            "edge_type": "references",
            "source": "llm/utils.py::remove_dict_none_values",
            "target": "llm/vua_utils.py::vua_remove_dict_none_values"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py::_LogResponse",
            "target": "llm/utils.py::_LogResponse::iter_bytes"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py::_LogTransport",
            "target": "llm/utils.py::_LogTransport::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/utils.py::_LogTransport",
            "target": "llm/utils.py::_LogTransport::handle_request"
        },
        {
            "edge_type": "references",
            "source": "llm/utils.py::remove_empty_and_zero",
            "target": "llm/utils.py::remove_empty_and_zero"
        },
        {
            "edge_type": "references",
            "source": "llm/utils.py::resolve_schema_input",
            "target": "llm/cli.py::load_template"
        },
        {
            "edge_type": "references",
            "source": "llm/utils.py::resolve_schema_input",
            "target": "llm/utils.py::schema_dsl"
        },
        {
            "edge_type": "references",
            "source": "llm/utils.py::schema_summary",
            "target": "llm/utils.py::schema_summary"
        },
        {
            "edge_type": "references",
            "source": "llm/utils.py::schema_dsl",
            "target": "llm/utils.py::multi_schema"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::CONVERSATION_NAME_LENGTH"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Usage"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Attachment"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Tool"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::ToolDef"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::ToolCall"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::ToolResult"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::CancelToolCall"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_wrap_tools"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_BaseConversation"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Conversation"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::AsyncConversation"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::FRAGMENT_SQL"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_BaseResponse"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Response"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::AsyncResponse"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_BaseChainResponse"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::ChainResponse"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Options"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_Options"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_get_key_mixin"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_BaseModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_Model"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::Model"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::KeyModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_AsyncModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::AsyncModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::AsyncKeyModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::EmbeddingModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::ModelWithAliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::EmbeddingModelWithAliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py",
            "target": "llm/models.py::_conversation_name"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Attachment",
            "target": "llm/models.py::Attachment::id"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Attachment",
            "target": "llm/models.py::Attachment::resolve_type"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Attachment",
            "target": "llm/models.py::Attachment::content_bytes"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Attachment",
            "target": "llm/models.py::Attachment::base64_content"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Attachment",
            "target": "llm/models.py::Attachment::from_row"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::Attachment::resolve_type",
            "target": "llm/utils.py::mimetype_from_path"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::Attachment::resolve_type",
            "target": "llm/utils.py::mimetype_from_string"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Tool",
            "target": "llm/models.py::Tool::__post_init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Tool",
            "target": "llm/models.py::Tool::_ensure_dict_schema"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Tool",
            "target": "llm/models.py::Tool::hash"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Tool",
            "target": "llm/models.py::Tool::function"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Prompt",
            "target": "llm/models.py::Prompt::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Prompt",
            "target": "llm/models.py::Prompt::prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Prompt",
            "target": "llm/models.py::Prompt::system"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::Prompt::__init__",
            "target": "llm/models.py::_wrap_tools"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseConversation",
            "target": "llm/models.py::_BaseConversation::from_row"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Conversation",
            "target": "llm/models.py::Conversation::prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Conversation",
            "target": "llm/models.py::Conversation::chain"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Conversation",
            "target": "llm/models.py::Conversation::from_row"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Conversation",
            "target": "llm/models.py::Conversation::__repr__"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::Conversation::from_row",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncConversation",
            "target": "llm/models.py::AsyncConversation::prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncConversation",
            "target": "llm/models.py::AsyncConversation::from_row"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncConversation",
            "target": "llm/models.py::AsyncConversation::__repr__"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::AsyncConversation::from_row",
            "target": "llm/__init__.py::get_async_model"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseResponse",
            "target": "llm/models.py::_BaseResponse::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseResponse",
            "target": "llm/models.py::_BaseResponse::add_tool_call"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseResponse",
            "target": "llm/models.py::_BaseResponse::set_usage"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseResponse",
            "target": "llm/models.py::_BaseResponse::from_row"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseResponse",
            "target": "llm/models.py::_BaseResponse::token_usage"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseResponse",
            "target": "llm/models.py::_BaseResponse::log_to_db"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::from_row",
            "target": "llm/__init__.py::get_async_model"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::from_row",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::token_usage",
            "target": "llm/utils.py::token_usage_string"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::log_to_db",
            "target": "llm/models.py::_conversation_name"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::log_to_db",
            "target": "llm/utils.py::make_schema_id"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::log_to_db",
            "target": "llm/utils.py::ensure_fragment"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_BaseResponse::log_to_db",
            "target": "llm/utils.py::ensure_tool"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::on_done"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::_on_done"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::__str__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::_force"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::text"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::text_or_raise"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::execute_tool_calls"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::tool_calls"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::tool_calls_or_raise"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::json"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::duration_ms"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::datetime_utc"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::usage"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::__iter__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Response",
            "target": "llm/models.py::Response::__repr__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::from_row"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::__aiter__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::text_or_raise"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::tool_calls_or_raise"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::__await__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::fake"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::AsyncResponse",
            "target": "llm/models.py::AsyncResponse::__repr__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseChainResponse",
            "target": "llm/models.py::_BaseChainResponse::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseChainResponse",
            "target": "llm/models.py::_BaseChainResponse::responses"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseChainResponse",
            "target": "llm/models.py::_BaseChainResponse::__iter__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseChainResponse",
            "target": "llm/models.py::_BaseChainResponse::text"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseChainResponse",
            "target": "llm/models.py::_BaseChainResponse::log_to_db"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_get_key_mixin",
            "target": "llm/models.py::_get_key_mixin::get_key"
        },
        {
            "edge_type": "references",
            "source": "llm/models.py::_get_key_mixin::get_key",
            "target": "llm/__init__.py::get_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseModel",
            "target": "llm/models.py::_BaseModel::_validate_attachments"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseModel",
            "target": "llm/models.py::_BaseModel::__str__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_BaseModel",
            "target": "llm/models.py::_BaseModel::__repr__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_Model",
            "target": "llm/models.py::_Model::conversation"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_Model",
            "target": "llm/models.py::_Model::prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_Model",
            "target": "llm/models.py::_Model::chain"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::Model",
            "target": "llm/models.py::Model::execute"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::KeyModel",
            "target": "llm/models.py::KeyModel::execute"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_AsyncModel",
            "target": "llm/models.py::_AsyncModel::conversation"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_AsyncModel",
            "target": "llm/models.py::_AsyncModel::prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::_AsyncModel",
            "target": "llm/models.py::_AsyncModel::chain"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::_check"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::embed"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::embed_multi"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::checking_iter"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::embed_batch"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::__str__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModel",
            "target": "llm/models.py::EmbeddingModel::__repr__"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::ModelWithAliases",
            "target": "llm/models.py::ModelWithAliases::matches"
        },
        {
            "edge_type": "contains",
            "source": "llm/models.py::EmbeddingModelWithAliases",
            "target": "llm/models.py::EmbeddingModelWithAliases::matches"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py",
            "target": "llm/templates.py::AttachmentType"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py",
            "target": "llm/templates.py::Template"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py",
            "target": "llm/templates.py::MissingVariables"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py::Template",
            "target": "llm/templates.py::Template::evaluate"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py::Template",
            "target": "llm/templates.py::Template::vars"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py::Template",
            "target": "llm/templates.py::Template::interpolate"
        },
        {
            "edge_type": "contains",
            "source": "llm/templates.py::Template",
            "target": "llm/templates.py::Template::extract_vars"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::embeddings_migrations"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::m001_create_tables"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::m002_foreign_key"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::m003_add_updated"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::m004_store_content_hash"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::md5"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::random_md5"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings_migrations.py",
            "target": "llm/embeddings_migrations.py::m005_add_content_blob"
        },
        {
            "edge_type": "contains",
            "source": "llm/errors.py",
            "target": "llm/errors.py::ModelError"
        },
        {
            "edge_type": "contains",
            "source": "llm/errors.py",
            "target": "llm/errors.py::NeedsKeyException"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::hookspec"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::hookimpl"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::register_commands"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::register_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::register_embedding_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::register_template_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::register_fragment_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/hookspecs.py",
            "target": "llm/hookspecs.py::register_tools"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py",
            "target": "llm/embeddings.py::Entry"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py",
            "target": "llm/embeddings.py::Collection"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py",
            "target": "llm/embeddings.py::DoesNotExist"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::model"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::count"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::embed"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::embed_multi"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::embed_multi_with_metadata"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::similar_by_vector"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::distance_score"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::similar_by_id"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::similar"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::exists"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::delete"
        },
        {
            "edge_type": "contains",
            "source": "llm/embeddings.py::Collection",
            "target": "llm/embeddings.py::Collection::content_hash"
        },
        {
            "edge_type": "references",
            "source": "llm/embeddings.py::Collection::embed",
            "target": "llm/__init__.py::encode"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::DEFAULT_TEMPLATE"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::FragmentNotFound"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::validate_fragment_alias"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::resolve_fragments"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::_load_by_alias"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::AttachmentError"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::resolve_attachment"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::AttachmentType"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::resolve_attachment_with_type"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::attachment_types_callback"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::json_validator"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::validator"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::schema_option"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::cli"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::read_prompt"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::debug_tool_call"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::approve_tool_call"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::chat"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::load_conversation"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::keys"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::keys_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::keys_path_command"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::keys_get"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::keys_set"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_status"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::backup"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_turn_on"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_turn_off"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::LOGS_COLUMNS"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::LOGS_SQL"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::LOGS_SQL_SEARCH"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::ATTACHMENTS_SQL"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::_display_fragments"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::models"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::_type_lookup"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::models_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::models_default"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::templates"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::templates_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::templates_show"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::templates_edit"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::templates_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::templates_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::schemas"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::schemas_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::schemas_show"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::schemas_dsl_debug"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::tools"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::tools_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::aliases"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::aliases_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::aliases_set"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::aliases_remove"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::aliases_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::fragments"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::fragments_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::fragments_set"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::fragments_show"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::fragments_remove"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::fragments_loaders"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::plugins_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::display_truncated"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::install"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::uninstall"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::embed"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::get_db"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::embed_multi"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::count_files"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::iterate_files"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::load_rows"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::tuples"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::similar"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::embed_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::embed_models_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::embed_models_default"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::collections"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::collections_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::embed_db_collections"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::collections_delete"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::options"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::options_list"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::options_show"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::options_set"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::options_clear"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::template_dir"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::get_history"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::render_errors"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::_human_readable_size"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::logs_on"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::get_all_model_options"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::get_model_options"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::set_model_option"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::clear_model_option"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::LoadTemplateError"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::_parse_yaml_template"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::load_template"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py",
            "target": "llm/cli.py::_tools_from_code"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::resolve_attachment",
            "target": "llm/utils.py::mimetype_from_string"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::resolve_attachment",
            "target": "llm/utils.py::mimetype_from_path"
        },
        {
            "edge_type": "contains",
            "source": "llm/cli.py::AttachmentType",
            "target": "llm/cli.py::AttachmentType::convert"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::AttachmentType::convert",
            "target": "llm/cli.py::resolve_attachment"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::attachment_types_callback",
            "target": "llm/cli.py::resolve_attachment_with_type"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::prompt",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::prompt",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::prompt",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::prompt",
            "target": "llm/utils.py::resolve_schema_input"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::prompt",
            "target": "llm/utils.py::multi_schema"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::prompt",
            "target": "llm/__init__.py::get_model_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/cli.py::load_conversation"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/cli.py::load_template"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::chat",
            "target": "llm/cli.py::render_errors"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::load_conversation",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::load_conversation",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::keys_list",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::keys_path_command",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::keys_get",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::keys_set",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_path",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_status",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_status",
            "target": "llm/cli.py::logs_on"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_status",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_status",
            "target": "llm/cli.py::_human_readable_size"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::backup",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::backup",
            "target": "llm/cli.py::_human_readable_size"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_turn_on",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_turn_off",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::resolve_schema_input"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::multi_schema"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/cli.py::resolve_fragments"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::make_schema_id"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::find_unused_key"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::output_rows_as_json"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::truncate_string"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_list",
            "target": "llm/utils.py::extract_fenced_code_block"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::_display_fragments",
            "target": "llm/utils.py::maybe_fenced_code"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::models_list",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::models_list",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::models_default",
            "target": "llm/__init__.py::get_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::models_default",
            "target": "llm/__init__.py::get_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::models_default",
            "target": "llm/__init__.py::set_default_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_list",
            "target": "llm/cli.py::template_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_list",
            "target": "llm/cli.py::load_template"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_list",
            "target": "llm/cli.py::display_truncated"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_show",
            "target": "llm/cli.py::load_template"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_edit",
            "target": "llm/cli.py::template_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_edit",
            "target": "llm/cli.py::load_template"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_path",
            "target": "llm/cli.py::template_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::templates_loaders",
            "target": "llm/__init__.py::get_template_loaders"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::schemas_list",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::schemas_list",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::schemas_list",
            "target": "llm/utils.py::schema_summary"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::schemas_show",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::schemas_show",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::schemas_dsl_debug",
            "target": "llm/utils.py::schema_dsl"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::tools_list",
            "target": "llm/__init__.py::get_tools"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::tools_list",
            "target": "llm/cli.py::_tools_from_code"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::aliases_list",
            "target": "llm/__init__.py::get_model_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::aliases_list",
            "target": "llm/__init__.py::get_embedding_model_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::aliases_set",
            "target": "llm/__init__.py::get_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::aliases_set",
            "target": "llm/__init__.py::set_alias"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::aliases_remove",
            "target": "llm/__init__.py::remove_alias"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::aliases_path",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_list",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_list",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_list",
            "target": "llm/utils.py::truncate_string"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_set",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_set",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_set",
            "target": "llm/cli.py::resolve_fragments"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_set",
            "target": "llm/utils.py::ensure_fragment"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_show",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_show",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_show",
            "target": "llm/cli.py::resolve_fragments"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_remove",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_remove",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::fragments_loaders",
            "target": "llm/__init__.py::get_fragment_loaders"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::plugins_list",
            "target": "llm/__init__.py::get_plugins"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::get_db",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_multi",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_multi",
            "target": "llm/__init__.py::get_default_embedding_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::similar",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_models_list",
            "target": "llm/__init__.py::get_embedding_models_with_aliases"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_models_default",
            "target": "llm/__init__.py::get_default_embedding_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_models_default",
            "target": "llm/__init__.py::set_default_embedding_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_models_default",
            "target": "llm/__init__.py::get_embedding_model"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::collections_path",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::embed_db_collections",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::collections_delete",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::options_list",
            "target": "llm/cli.py::get_all_model_options"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::options_show",
            "target": "llm/cli.py::get_model_options"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::options_set",
            "target": "llm/cli.py::render_errors"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::options_set",
            "target": "llm/cli.py::set_model_option"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::options_clear",
            "target": "llm/cli.py::get_model_options"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::options_clear",
            "target": "llm/cli.py::clear_model_option"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::template_dir",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_db_path",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::get_history",
            "target": "llm/cli.py::logs_db_path"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::get_history",
            "target": "llm/migrations.py::migrate"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::logs_on",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::get_all_model_options",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::get_model_options",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::set_model_option",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::clear_model_option",
            "target": "llm/__init__.py::user_dir"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::_parse_yaml_template",
            "target": "llm/cli.py::render_errors"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::load_template",
            "target": "llm/cli.py::_parse_yaml_template"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::load_template",
            "target": "llm/utils.py::has_plugin_prefix"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::load_template",
            "target": "llm/__init__.py::get_template_loaders"
        },
        {
            "edge_type": "references",
            "source": "llm/cli.py::load_template",
            "target": "llm/cli.py::template_dir"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::register_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::register_embedding_models"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::register_commands"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::openai_"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::models"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::SharedOptions"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::ReasoningEffortEnum"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::OptionsForReasoning"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::_attachment"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::_Shared"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::Chat"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::Options"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::AsyncChat"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::Completion"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::not_nulls"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::combine_chunks"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py",
            "target": "llm/default_plugins/openai_models.py::redact_data"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::register_models",
            "target": "llm/__init__.py::register"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::register_embedding_models",
            "target": "llm/__init__.py::register"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel",
            "target": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel",
            "target": "llm/default_plugins/openai_models.py::OpenAIEmbeddingModel::embed_batch"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::models",
            "target": "llm/__init__.py::get_key"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::models",
            "target": "llm/utils.py::dicts_to_table_string"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::SharedOptions",
            "target": "llm/default_plugins/openai_models.py::SharedOptions::validate_logit_bias"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::_Shared",
            "target": "llm/default_plugins/openai_models.py::_Shared::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::_Shared",
            "target": "llm/default_plugins/openai_models.py::_Shared::__str__"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::_Shared",
            "target": "llm/default_plugins/openai_models.py::_Shared::build_messages"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::_Shared",
            "target": "llm/default_plugins/openai_models.py::_Shared::set_usage"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::_Shared",
            "target": "llm/default_plugins/openai_models.py::_Shared::get_client"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::_Shared",
            "target": "llm/default_plugins/openai_models.py::_Shared::build_kwargs"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::_Shared::build_messages",
            "target": "llm/default_plugins/openai_models.py::_attachment"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::_Shared::set_usage",
            "target": "llm/utils.py::simplify_usage_dict"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::_Shared::get_client",
            "target": "llm/utils.py::logging_client"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::_Shared::build_kwargs",
            "target": "llm/default_plugins/openai_models.py::not_nulls"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::Chat",
            "target": "llm/default_plugins/openai_models.py::Chat::execute"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::Chat::execute",
            "target": "llm/utils.py::remove_dict_none_values"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::Chat::execute",
            "target": "llm/default_plugins/openai_models.py::combine_chunks"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::Chat::execute",
            "target": "llm/default_plugins/openai_models.py::redact_data"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::Completion",
            "target": "llm/default_plugins/openai_models.py::Completion::__init__"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::Completion",
            "target": "llm/default_plugins/openai_models.py::Completion::__str__"
        },
        {
            "edge_type": "contains",
            "source": "llm/default_plugins/openai_models.py::Completion",
            "target": "llm/default_plugins/openai_models.py::Completion::execute"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::Completion::execute",
            "target": "llm/default_plugins/openai_models.py::combine_chunks"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::Completion::execute",
            "target": "llm/utils.py::remove_dict_none_values"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::Completion::execute",
            "target": "llm/default_plugins/openai_models.py::redact_data"
        },
        {
            "edge_type": "references",
            "source": "llm/default_plugins/openai_models.py::redact_data",
            "target": "llm/default_plugins/openai_models.py::redact_data"
        }
    ]
}